:PROPERTIES:
:ID: 0DFDAF4D-E299-98E4-25C3-5BB6500E5BA8
:END:
#+title: Sprint Backlog 02
#+options: <:nil c:nil ^:nil d:nil date:nil author:nil toc:nil html-postamble:nil
#+todo: STARTED | COMPLETED CANCELLED POSTPONED BLOCKED
#+tags: { code(c) infra(i) analysis(n) agile(a) }
#+startup: inlineimages

* Sprint Mission

- Create basic project infrastructure.
- add client and server support.

* Stories

** Active

#+begin: clocktable :maxlevel 3 :scope subtree :tags t :indent nil :emphasize nil :scope file :narrow 75 :formula % :block today
#+TBLNAME: today_summary
#+CAPTION: Clock summary at [2025-09-21 Sun 10:24], for Sunday, September 21, 2025.
|       | <75>                                               |        |      |      |       |
| Tags  | Headline                                           | Time   |      |      |     % |
|-------+----------------------------------------------------+--------+------+------+-------|
|       | *Total time*                                       | *1:29* |      |      | 100.0 |
|-------+----------------------------------------------------+--------+------+------+-------|
|       | Stories                                            | 1:29   |      |      | 100.0 |
|       | Active                                             |        | 1:29 |      | 100.0 |
| agile | Sprint and product backlog refinement              |        |      | 0:04 |   4.5 |
| code  | Implement a cobalt based server and client         |        |      | 0:35 |  39.3 |
| infra | Investigate build warning for vcpkg binary caching |        |      | 0:25 |  28.1 |
| infra | Investigate build warning for qtbase               |        |      | 0:10 |  11.2 |
| infra | vcpkg caching seems disabled                       |        |      | 0:15 |  16.9 |
#+end:

#+begin: clocktable :maxlevel 3 :scope subtree :tags t :indent nil :emphasize nil :scope file :narrow 75 :formula %
#+TBLNAME: sprint_summary
#+CAPTION: Clock summary at [2025-09-21 Sun 10:24]
|       | <75>                                               |         |       |      |       |
| Tags  | Headline                                           | Time    |       |      |     % |
|-------+----------------------------------------------------+---------+-------+------+-------|
|       | *Total time*                                       | *31:17* |       |      | 100.0 |
|-------+----------------------------------------------------+---------+-------+------+-------|
|       | Stories                                            | 31:17   |       |      | 100.0 |
|       | Active                                             |         | 31:17 |      | 100.0 |
| agile | Sprint and product backlog refinement              |         |       | 1:47 |   5.7 |
| infra | Fix broken builds                                  |         |       | 0:36 |   1.9 |
| code  | Create a containing structure for data             |         |       | 0:35 |   1.9 |
| code  | Add temporal support to currencies                 |         |       | 2:59 |   9.5 |
| code  | Add command to dump currencies                     |         |       | 4:18 |  13.7 |
| code  | Refactor code for currencies                       |         |       | 3:52 |  12.4 |
| code  | Restore qt setup                                   |         |       | 2:20 |   7.5 |
| code  | Add gemini action                                  |         |       | 0:05 |   0.3 |
| code  | Remove ImGui support                               |         |       | 0:08 |   0.4 |
| code  | Create a GRPC based service                        |         |       | 2:09 |   6.9 |
| code  | Implement a 0MQ based RPC service and client       |         |       | 3:55 |  12.5 |
| code  | Fix misspell fixer errors                          |         |       | 0:08 |   0.4 |
| code  | Remove URL support from prog mode in emacs         |         |       | 0:14 |   0.7 |
| code  | Remove GRPC support                                |         |       | 0:16 |   0.9 |
| code  | Implement a cobalt based server and client         |         |       | 2:53 |   9.2 |
| infra | Investigate build warning for vcpkg binary caching |         |       | 0:25 |   1.3 |
| infra | Investigate build warning for qtbase               |         |       | 0:10 |   0.5 |
| code  | Use bitemporal support from Postgres 18            |         |       | 1:47 |   5.7 |
| code  | Fix windows and osx builds                         |         |       | 0:27 |   1.4 |
| code  | Fix gemini cli action                              |         |       | 0:45 |   2.4 |
| infra | vcpkg caching seems disabled                       |         |       | 0:15 |   0.8 |
| code  | Add workspace as a container                       |         |       | 1:13 |   3.9 |
#+end:

*** STARTED Sprint and product backlog refinement                     :agile:
    :LOGBOOK:
    CLOCK: [2025-09-21 Sun 10:06]--[2025-09-21 Sun 10:34] =>  0:28
    CLOCK: [2025-09-21 Sun 10:01]--[2025-09-21 Sun 10:05] =>  0:04
    CLOCK: [2025-09-20 Sat 08:23]--[2025-09-20 Sat 08:44] =>  0:21
    CLOCK: [2025-02-02 Sun 12:00]--[2025-02-02 Sun 12:53] =>  0:53
    :END:

Updates to sprint and product backlog.

#+begin_src emacs-lisp :exports none
;; agenda
(org-agenda-file-to-front)
#+end_src

#+name: stories-chart
#+begin_src R :var sprint_summary=sprint_summary :results file graphics :exports results :file sprint_backlog_02_stories.png :width 1200 :height 650
library(conflicted)
library(grid)
library(tidyverse)
library(tibble)

# Remove unnecessary rows.
clean_sprint_summary <- tail(sprint_summary, -4)
names <- unlist(clean_sprint_summary[2])
values <- as.numeric(unlist(clean_sprint_summary[6]))

# Create a data frame.
df <- data.frame(
  cost = values,
  stories = factor(names, levels = names[order(values, decreasing = FALSE)]),
  y = seq(length(names)) * 0.9
)

# Setup the colors
blue <- "#076fa2"

p <- ggplot(df) +
  aes(x = cost, y = stories) +
  geom_col(fill = blue, width = 0.6) +
  ggtitle("Sprint 1: Resourcing per Story") +
  xlab("Resourcing (%)") + ylab("Stories") +
  theme(text = element_text(size = 15))

print(p)
#+end_src

#+RESULTS: stories-chart
[[file:sprint_backlog_02_stories.png]]

#+name: tags-chart
#+begin_src R :var sprint_summary=sprint_summary :results file graphics :exports results :file sprint_backlog_02_tags.png :width 600 :height 400
library(conflicted)
library(grid)
library(tidyverse)
library(tibble)

# Remove unnecessary rows.
clean_sprint_summary <- tail(sprint_summary, -4)
names <- unlist(clean_sprint_summary[1])
values <- as.numeric(unlist(clean_sprint_summary[6]))

# Create a data frame.
df <- data.frame(
  cost = values,
  tags = names,
  y = seq(length(names)) * 0.9
)
# factor(names, levels = names[order(values, decreasing = FALSE)])

df2 <- setNames(aggregate(df$cost, by = list(df$tags), FUN = sum),  c("cost", "tags"))
# Setup the colors
blue <- "#076fa2"

p <- ggplot(df2) +
  aes(x = cost, y = tags) +
  geom_col(fill = blue, width = 0.6) +
  ggtitle("Sprint 1: Resourcing per Tag") +
  xlab("Resourcing (%)") + ylab("Story types") +
  theme(text = element_text(size = 15))

print(p)
#+end_src

#+RESULTS: tags-chart
[[file:sprint_backlog_02_tags.png]]

    :LOGBOOK:
    CLOCK: [2024-07-28 Sun 22:40]--[2024-07-28 Sun 23:09] =>  0:29
    :END:
*** COMPLETED Fix broken builds                                       :infra:
    :LOGBOOK:
    CLOCK: [2025-02-02 Sun 12:54]--[2025-02-02 Sun 13:30] =>  0:36
   :END:

With the move to ImGui the builds started failing across the board.

Disable other OSs for now.

*** COMPLETED Create a containing structure for data                   :code:
    :LOGBOOK:
    CLOCK: [2025-02-03 Mon 22:07]--[2025-02-03 Mon 22:42] =>  0:35
    :END:

We need to be able to represent the data in the filesystem for the ORE samples
in a way that allows users to load and save the samples. The data in the
filesystem has the following structure:

- Examples
  - Example 1:
    - Input
    - ExpectedOutput, e.g. Output
  - Example 2
  - ...
  - Example n
  - Input

The overall context under which valuation is taking place needs a name. Options:

- environment
- workspace
- sandbox: seems to imply the data is not "real" but that is not always the
  case. This seems more like a label we could apply to the top-level container
  rather than its overall name.

Each entry within the top-level container is then itself another kind of
container. Options:

- namespace
- package

There are two types of these containers:

- libraries: components whose content is made to be shared with other
  components; and
- executables: components whose content is sufficient to execute computations.

- component, elements.

Elements within a component is of two kinds: input and output. However, this may
not necessarily be a good classification because some outputs can be used as
inputs to output other elements. Perhaps this is more of a tag.

Notes:

- move this analysis to documentation.

*** COMPLETED Add temporal support to currencies                       :code:
    :LOGBOOK:
    CLOCK: [2025-02-09 Sun 22:35]--[2025-02-09 Sun 23:18] =>  0:43
    CLOCK: [2025-02-08 Sat 20:51]--[2025-02-08 Sat 23:07] =>  2:16
    :END:

We need a simple way to keep track of changes. No need for bitemporal, just
single dimension.

Links:

- [[https://stackoverflow.com/questions/52426656/track-last-modification-timestamp-of-a-row-in-postgres][Track last modification timestamp of a row in Postgres]]

*** COMPLETED Add command to dump currencies                           :code:
    :LOGBOOK:
    CLOCK: [2025-02-12 Wed 23:46]--[2025-02-13 Thu 00:34] =>  0:48
    CLOCK: [2025-02-11 Tue 23:01]--[2025-02-11 Tue 23:42] =>  0:41
    CLOCK: [2025-02-11 Tue 22:13]--[2025-02-11 Tue 23:00] =>  0:47
    CLOCK: [2025-02-10 Mon 23:16]--[2025-02-10 Mon 23:58] =>  0:42
    CLOCK: [2025-02-10 Mon 22:35]--[2025-02-10 Mon 23:15] =>  0:40
    CLOCK: [2025-02-09 Sun 23:19]--[2025-02-09 Sun 23:59] =>  0:40
    :END:

We need:

- latest
- as of
- all for a given iso code.

Notes:

- add timestamp fields to domain objects.

*** CANCELLED Refactor code for currencies                             :code:
    :LOGBOOK:
    CLOCK: [2025-02-11 Tue 21:41]--[2025-02-11 Tue 22:06] =>  0:25
    CLOCK: [2025-02-11 Tue 20:55]--[2025-02-11 Tue 21:15] =>  0:20
    CLOCK: [2025-02-08 Sat 18:58]--[2025-02-08 Sat 19:37] =>  0:39
    CLOCK: [2025-02-08 Sat 16:30]--[2025-02-08 Sat 18:58] =>  2:28
    :END:

Links:

- [[https://technotes.blog/2023/01/24/getting-started-with-imgui-a-beginners-tutorial/][Getting Started with ImGui: A Beginner’s Tutorial]]
- [[https://stackoverflow.com/questions/38457309/how-to-use-libpqxx-to-receive-notifications-from-the-postgresql-database][How to use libpqxx to receive notifications from the PostgreSQL database?]]
- [[https://github.com/ocornut/imgui/issues/4478][Text color of disabled menu item is incorrect]]

*** COMPLETED Restore qt setup                                         :code:
    :LOGBOOK:
    CLOCK: [2025-08-07 Thu 18:02]--[2025-08-07 Thu 20:22] =>  2:20
    :END:

We will forge ahead with a QT UI, given the issues we had with imGui cross
platform. We can worry about it later.

*** COMPLETED Add gemini action                                        :code:
    :LOGBOOK:
    CLOCK: [2025-08-07 Thu 20:26]--[2025-08-07 Thu 20:31] =>  0:05
    :END:

#+begin_quote
To get started, download Gemini CLI 0.1.18 or later and run `/setup-github`.
#+end_quote

Links:

- [[https://github.com/google-github-actions/run-gemini-cli][GH run-gemini-cli]]
- [[https://blog.google/technology/developers/introducing-gemini-cli-github-actions][Meet your new AI coding teammate: Gemini CLI GitHub Actions]]

*** COMPLETED Remove ImGui support                                     :code:
    :LOGBOOK:
    CLOCK: [2025-08-10 Sun 13:41]--[2025-08-10 Sun 13:49] =>  0:08
    :END:

We never got it to compile under windows and osx.

*** CANCELLED Create a GRPC based service                              :code:
    :LOGBOOK:
    CLOCK: [2025-08-15 Fri 20:51]--[2025-08-15 Fri 21:04] =>  0:13
    CLOCK: [2025-08-10 Sun 14:10]--[2025-08-10 Sun 15:30] =>  1:20
    CLOCK: [2025-08-10 Sun 13:50]--[2025-08-10 Sun 14:09] =>  0:19
    CLOCK: [2025-08-10 Sun 13:20]--[2025-08-10 Sun 13:37] =>  0:17
    :END:

- *Reason:* GRPC is quite convoluted and generates weird code. Try first to
  build a simple RPC using ZeroMQ and see how hard it is.

Needs to be able to login, and retrieve currencies.

*** CANCELLED Implement a 0MQ based RPC service and client             :code:
    :LOGBOOK:
    CLOCK: [2025-09-18 Thu 13:57]--[2025-09-18 Thu 17:26] =>  3:29
    CLOCK: [2025-09-18 Thu 12:59]--[2025-09-18 Thu 13:25] =>  0:26
    :END:

*Rationale*: Actually we should experiment with raw asio first before adding
more complexity.

*** COMPLETED Fix misspell fixer errors                                :code:
    :LOGBOOK:
    CLOCK: [2025-09-20 Sat 14:50]--[2025-09-20 Sat 14:58] =>  0:08
    :END:

Error:

#+begin_src
misspell-fixer: -r Enable real run. Overwrite original files!
misspell-fixer: -s Enable showing of diffs.
misspell-fixer: -v Enable verbose mode.
misspell-fixer: -n Disable backups.
misspell-fixer: Target directories: .
misspell-fixer: Your grep version is +zstd which is at least the optimal: 2.28.
misspell-fixer: Iteration 0: prefiltering.
misspell-fixer: Results of prefiltering: (filename:line:pattern)
./doc/agile/v0/sprint_backlog_02.org:382:constraints
misspell-fixer: Iteration 0: processing.
misspell-fixer: actual file: ./doc/agile/v0/sprint_backlog_02.org
misspell-fixer: temp file: ./doc/agile/v0/sprint_backlog_02.org.64
misspell-fixer: misspellings are fixed!
misspell-fixer: Iteration 0: done.
misspell-fixer: Iteration 1: prefiltering.
misspell-fixer: Results of prefiltering: (filename:line:pattern)
misspell-fixer: Iteration 1: nothing to replace.
misspell-fixer: Iteration 1: done.
=================================

Error: Unable to process file command 'output' successfully.
Error: Invalid format '+++ ./doc/agile/v0/sprint_backlog_02.org.64	2025-09-20 10:57:51.112708427 +0000'
#+end_src

The problem may be related to the error in the URL.


***

*** COMPLETED Remove URL support from prog mode in emacs               :code:
    :LOGBOOK:
    CLOCK: [2025-09-20 Sat 15:26]--[2025-09-20 Sat 15:40] =>  0:14
    :END:

*** COMPLETED Remove GRPC support                                      :code:
    :LOGBOOK:
    CLOCK: [2025-09-20 Sat 11:51]--[2025-09-20 Sat 12:07] =>  0:16
    :END:

- remove code using GRPC, leave only server and client skeletons.

*** COMPLETED Implement a cobalt based server and client               :code:
    :LOGBOOK:
    CLOCK: [2025-09-21 Sun 00:41]--[2025-09-21 Sun 01:16] =>  0:35
    CLOCK: [2025-09-20 Sat 21:02]--[2025-09-20 Sat 21:38] =>  0:36
    CLOCK: [2025-09-20 Sat 17:44]--[2025-09-20 Sat 18:20] =>  0:36
    CLOCK: [2025-09-20 Sat 17:16]--[2025-09-20 Sat 17:43] =>  0:27
    CLOCK: [2025-09-20 Sat 16:36]--[2025-09-20 Sat 17:15] =>  0:39
    :END:

Using the examples, create a really simple server and client. Must use SSL.

Links:

- [[https://www.boost.org/doc/libs/latest/libs/cobalt/doc/html/index.html][cobalt docs]]
- [[https://github.com/boostorg/cobalt][GH cobalt]]

*** STARTED Completions in emacs org mode are incorrect                :code:
    :LOGBOOK:
    CLOCK: [2025-09-21 Sun 11:28]--[2025-09-21 Sun 11:44] =>  0:16
    CLOCK: [2025-09-21 Sun 11:16]--[2025-09-21 Sun 11:27] =>  0:11
    CLOCK: [2025-09-21 Sun 10:40]--[2025-09-21 Sun 11:15] =>  0:35
    :END:

At present we are getting random lisp snippets when filling in agile backlogs.

Does not solve all the problems but helps:

#+begin_src emacs-lisp
(defun cunene/org-mode-hook ()
  "Hook to run in org mode."
  ;; Make sure Org's native completions are prioritized
  (setq-local completion-at-point-functions
              (append (list #'org-pcomplete-initial) ; Org's native completion
                      completion-at-point-functions)))

#+end_src

Notes:

- fixed assorted ilist issues.
- fixed completion on git commit.

*** STARTED Investigate build warning for vcpkg binary caching        :infra:
    :LOGBOOK:
    CLOCK: [2025-09-21 Sun 09:25]--[2025-09-21 Sun 09:50] =>  0:25
    :END:

At present we are getting:

#+begin_src
Additional packages (*) will be modified to complete this operation.
$VCPKG_BINARY_SOURCES: warning: The 'x-gha' binary caching backend has been removed. Consider using a NuGet-based binary caching provider instead, see extended documentation at https://learn.microsoft.com/vcpkg/users/binarycaching?WT.mc_id=vcpkg_inproduct_cli.
  on expression: clear;x-gha,readwrite
#+end_src

Raised:

- [[https://github.com/lukka/run-vcpkg/issues/253][#253: Addressing vcpkg warning related to binary caching]]

*** STARTED Investigate build warning for qtbase                      :infra:
    :LOGBOOK:
    CLOCK: [2025-09-21 Sun 09:51]--[2025-09-21 Sun 10:01] =>  0:10
    :END:

At present we are getting:

#+begin_src
Building qtbase[brotli,concurrent,core,dbus,dnslookup,doubleconversion,egl,fontconfig,freetype,gui,harfbuzz,icu,jpeg,network,opengl,openssl,pcre2,png,sql,sql-psql,sql-sqlite,testlib,thread,widgets,xcb,xcb-xlib,xkb,xkbcommon-x11,xlib,xrender,zstd]:x64-linux@6.8.3#5...
CMake Warning at ports/qtbase/portfile.cmake:49 (message):
  qtbase currently requires packages from the system package manager.  They
  can be installed on Ubuntu systems via sudo apt-get install '^libxcb.*-dev'
  libx11-xcb-dev libglu1-mesa-dev libxrender-dev libxi-dev libxkbcommon-dev
  libxkbcommon-x11-dev libegl1-mesa-dev.
#+end_src

According to grok:

#+begin_quote
The CMake warning from ports/qtbase/portfile.cmake indicates that the qtbase
package in vcpkg requires additional system dependencies (like libxcb and
others) to be installed on your system, specifically for Ubuntu. This warning
appears because vcpkg detects that these dependencies are not satisfied. To
remove the warning, you need to install the required system packages or suppress
the warning if you’re sure the dependencies are met or not needed.
#+end_quote

We seem to be installing all of the required libraries on our script. We may
need to:

#+begin_src bash
export VCPKG_DISABLE_SYSTEM_PACKAGE_CHECK=1
#+end_src

*** STARTED Investigate bitemporal support from Postgres 18        :analysis:
    :LOGBOOK:
    CLOCK: [2025-08-08 Fri 08:27]--[2025-08-08 Fri 09:09] =>  0:42
    CLOCK: [2025-08-08 Fri 08:24]--[2025-08-08 Fri 08:26] =>  0:02
    CLOCK: [2025-08-07 Thu 23:51]--[2025-08-07 Thu 23:59] =>  0:08
    CLOCK: [2025-08-07 Thu 22:12]--[2025-08-07 Thu 23:07] =>  0:55
    :END:

Links:

- [[https://hdombrovskaya.wordpress.com/2024/05/05/3937/][(Bi)Temporal Tables, PostgreSQL and SQL Standard]]
- [[https://neon.com/postgresql/postgresql-18/temporal-constraints][PostgreSQL 18 Temporal Constraints]]
- [[https://www.depesz.com/2024/10/03/waiting-for-postgresql-18-add-temporal-foreign-key-constraints/][Waiting for PostgreSQL 18 – Add temporal FOREIGN KEY constraints]]
- [[https://neon.com/postgresql/postgresql-tutorial/postgresql-identity-column][PostgreSQL Identity Column]]
- [[https://wiki.postgresql.org/wiki/SQL2011Temporal][SQL2011Temporal]]
- [[https://neon.com/postgresql/postgresql-18-new-features][PostgreSQL 18 New Features]]
- [[https://lord.technology/2025/01/28/understanding-temporal-primary-keys.html][Understanding Bitemporal Primary Keys]]
- [[https://hypirion.com/musings/implementing-system-versioned-tables-in-postgres][Implementing System-Versioned Tables in Postgres]]
- [[https://clarkdave.net/2015/02/historical-records-with-postgresql-and-temporal-tables-and-sql-2011/][Historical records with PostgreSQL, temporal tables and SQL:2011]]
- [[https://github.com/arkhipov/temporal_tables][GH temporal_tables]]
- [[https://learn.microsoft.com/en-us/sql/relational-databases/tables/querying-data-in-a-system-versioned-temporal-table?view=sql-server-ver17][Query data in a system-versioned temporal table]]

*** STARTED Fix windows and osx builds                                 :code:
    :LOGBOOK:
    CLOCK: [2025-09-20 Sat 14:58]--[2025-09-20 Sat 15:25] =>  0:27
    :END:

*** STARTED Fix gemini cli action                                      :code:
    :LOGBOOK:
    CLOCK: [2025-09-20 Sat 15:50]--[2025-09-20 Sat 16:35] =>  0:45
    :END:


*** STARTED vcpkg caching seems disabled                             :infra:
    :LOGBOOK:
    CLOCK: [2025-09-21 Sun 10:06]--[2025-09-21 Sun 10:21] =>  0:15
    :END:

It seems caching is not kicking in so builds are very slow.

*** STARTED Create a =comms= library                                   :code:
    :LOGBOOK:
    :END:

Move comms related code to it's own library.
Mo
Tasks:

- add options for port, key file etc.
- add support for environment variables.

#+begin_src c++
// Parse environment variables (prefix "MYAPP_")
po::store(po::parse_environment(desc, "MYAPP_"), vm);
#+end_src

- refactor server and client code into their own classes.

*** Merge client into console                                          :code:

We don't really need a client, we can add this functionality to console.

Notes:

- rename console to cli.
- add a mode in console called =client=.
- add port, etc as configuration variables.
- add the location of cert as configuration variables.
- read variables from environment.

*** Rename =core= to =risk=                                            :code:

We need to distinguish between the types in =comms= etc and the core types for
domain modeling. We need a good name for this.

*** Add support for JWT                                                :code:

Links:

- [[https://iniakunhuda.medium.com/building-secure-jwt-authentication-in-go-with-postgresql-94b6724f9b75][Building Secure JWT Authentication in Go with PostgreSQL]]
- [[https://github.com/Thalhammer/jwt-cpp][GH jwt-cpp]]

*** Add serialisation support for reflect-cpp                          :code:

Links:

- [[https://github.com/getml/reflect-cpp/][GH reflect-cpp]]

*** Read up on ECS                                                 :analysis:

Links:

- [[https://en.wikipedia.org/wiki/Entity_component_system][wikipedia: Entity component system]]
- [[https://github.com/skypjack/entt][GH entt]]: "EnTT is a header-only, tiny and easy to use library for game
  programming and much more written in modern C++."

*** Consider adding otel support                                       :code:

Links:

- [[https://github.com/destrex271/postgresexporter][GH postgresexporter]]: "Unofficial Postgres Exporter for OTEL"
- [[https://opentelemetry-cpp.readthedocs.io/en/latest/otel_docs/classopentelemetry_1_1sdk_1_1trace_1_1SpanExporter.html][SpanExporter]]: create your own exporter.

*** Add chat support                                                   :code:

Links:

- [[https://github.com/communi/libcommuni][GH libcommuni]]: "A cross-platform IRC framework written with Qt."
- [[https://github.com/inspircd/inspircd/tree/insp4][GH insp4]]: "InspIRCd is a modular C++ Internet Relay Chat (IRC) server for
  UNIX-like and Windows systems."
- https://www.inspircd.org/

*** Add account support                                                :code:

Links:

- [[https://www.azerothcore.org/wiki/creating-accounts][azeroth: Creating Accounts]]
- [[https://www.azerothcore.org/wiki/account][azeroth: account]]
- [[https://www.mongodb.com/docs/manual/reference/built-in-roles/#std-label-built-in-roles][mongo: Built-In Roles]]

*** Add session support                                                :code:

Users must be able to login and logout.

*** Use sqlgen for postgres                                            :code:

Links:

- [[https://github.com/getml/sqlgen/][GH sqlgen]]


*** Consider exposing end points via HTTP                              :code:

Having a binary protocol is helpful for performance but it may make life easier
to expose some functionality via HTTP.

Links:

- [[https://github.com/dfleury2/beauty][GH: beauty]]: "Beauty is a layer above Boost.Beast which provide facilities to
  create Http server or client. Beauty allows the creation of synchronous or
  asynchronous server and client, and adds some signals and timer management
  based on Boost.Asio"

*** Consider using getML to integrate ML                               :code:

Links:

- [[https://github.com/getml/getml-community][GH: getml]]: "getML is a tool for automating feature engineering on relational
  data and time series. It includes a specifically customized database Engine
  for this very purpose."
- [[https://getml.com/latest/user_guide/quick_start/][user guide quick start]]

*** Configure postgres with async IO                                   :code:

Links:

- [[https://neon.com/postgresql/postgresql-18/asynchronous-io][PostgreSQL 18 Asynchronous I/O]]

*** Consider using sqls for LSP                                        :code:

We are presently testing postgrestools. If that does not work well, we should
consider sqls.

Links:

- [[https://www.reddit.com/r/emacs/comments/ijbvwv/eglot_sqls_sql_client/][eglot + sqls = SQL client?]]

*** Add workspace as a container                                       :code:
    :LOGBOOK:
    CLOCK: [2025-02-13 Thu 22:18]--[2025-02-13 Thu 22:35] =>  0:17
    CLOCK: [2025-02-13 Thu 21:21]--[2025-02-13 Thu 22:17] =>  0:56
    :END:

Core needs to have a container for all of the data stored within a context.

*** Add portfolio support                                              :code:

Links:

- [[https://leonardqmarcq.com/posts/modeling-hierarchical-tree-data][Modeling Hierarchical Tree Data in PostgreSQL]]

*** Convert plantuml diagrams to org-babel                              :doc:

It may be easier to integrate diagrams with roam if they are org-mode documents.
Experiment with babel for this.

*** Setup code quality actions                                        :infra:

We added a test password to the repo on purpose to see if it was going to be
detected by the github actions:

#+begin_src c++
    std::string connection_string("postgresql://ores:ores@localhost:5433/oresdb");
#+end_src

It wasn't. We need to figure out which actions need to be setup for this. Add
any other actions we may be missing.

The build seems to be failing:

#+begin_src sh
-- SCCache NOT found.
 CMake Error at /usr/local/share/cmake-3.30/Modules/CMakeDetermineSystem.cmake:152 (message):
   Could not find toolchain file:
   /home/runner/work/OreStudio/OreStudio/vcpkg/scripts/buildsystems/vcpkg.cmake
 Call Stack (most recent call first):
 CMakeLists.txt:61 (project)


 CMake Error: CMake was unable to find a build program corresponding to "Unix Makefiles".  CMAKE_MAKE_PROGRAM is not set.  You probably need to select a different build tool.
 CMake Error: CMAKE_CXX_COMPILER not set, after EnableLanguage
 -- Configuring incomplete, errors occurred!
 ~/work/OreStudio/OreStudio ~/work/OreStudio/OreStudio
 ~/work/OreStudio/OreStudio
 cpp/autobuilder: No supported build command succeeded.
 cpp/autobuilder: autobuild summary.
 Error: We were unable to automatically build your code. Please replace the call to the autobuild action with your custom build steps. Encountered a fatal error while running "/opt/hostedtoolcache/CodeQL/2.18.0/x64/codeql/cpp/tools/autobuild.sh". Exit code was 1 and last log line was: cpp/autobuilder: autobuild summary. See the logs for more details.
#+end_src

This may be due to a missing sub-module for vcpkg.

*** Add a message queue                                                :code:

Links:

- [[https://www.oliverlambson.com/pgmq][Use what you already have: Building a message queue on Postgres]]

*** Add support for =windows-msvc-clang-cl=                           :infra:

We need to setup a build for MSVC clang.

*** Implement database connectivity                                    :code:

We have hard coded database configuration. Implement this properly both for
console and UI.

*** Starting UI from file manager does not work                       :infra:

At present we can't start the Qt UI because the file manager thinks its a video.
Maybe we need a desktop file.

Example desktop file:

#+begin_src conf
[Desktop Entry]
Comment=
Terminal=true
Name=fixvideo
Exec=/home/user/fixvideo.sh %f
Type=Application
Icon=/usr/share/icons/gnome/48x48/apps/gnome-settings-theme.png
Encoding=UTF-8
Hidden=false
NoDisplay=false
Categories=AudioVideo;Player;Recorder;
MimeType=video/dv;v
#+end_src

Source: [[https://emacs.stackexchange.com/questions/58037/is-there-a-standard-mode-for-ini-files][Is there a standard mode for .ini files?]]

Tasks:

- create a desktop file for the application.
- add an icon.

*** Consider adding the update copyrights action from quantlib        :infra:

We should remove copyrights from each file and instead have it only at the
top-level to make maintenance easier.

See [[https://github.com/OpenSourceRisk/QuantLib/blob/master/.github/workflows/copyrights.yml][=copyrights.yml=]] in QuantLib repo.

*** Consider adding clang-tidy build                                  :infra:

As per QuantLib build: [[https://github.com/OpenSourceRisk/QuantLib/blob/master/.github/workflows/tidy.yml][=tidy.yml=]].

*** Consider adding test times build                                  :infra:

As per QuantLib build: [[https://github.com/OpenSourceRisk/QuantLib/blob/master/.github/workflows/test-times.yml][=test-times.yml=]].

*** Consider adding sanitizer build                                   :infra:

As per QuantLib build: [[https://github.com/OpenSourceRisk/QuantLib/blob/master/.github/workflows/sanitizer.yml][=sanitizer.yml=]].

*** Use string views for static strings                               :infra:

We are creating =std::strings= where we don't need them, use string views
instead.

*** Create HTTP end point for currencies                              :infra:

Add a basic HTTP server using boost beast. Then we just need a couple of verbs:

- GET: return all currencies in database.
- POST: add one or more currencies.

*** Fix site links to main page                                         :doc:

At present we renamed readme to index in the HTML export. Do a symlink or a copy
of this file to fix links.

*** Add discord support to app                                        :infra:

Links:

- [[https://github.com/RealTimeChris/DiscordCoreAPI][DiscordCoreAPI]]

*** Recipes do not show variables in org-babel                        :infra:

At present when we look at a recipe in the site, we cannot tell what the
environment variables are:

#+begin_src sh
./ores.console import ${log_args} --currency-configuration ${currency_config_dir}/currencies.xml
#+END_SRC

It would be nice if =log_args= etc showed up in the recipe.

Links:

- [[https://kitchingroup.cheme.cmu.edu/blog/2019/02/12/Using-results-from-one-code-block-in-another-org-mode/][Using results from one code block in another org-mode]]

*** Install Windows package on Windows machine                        :infra:

We need to install and run the windows package and make sure it works. Check
console and GUI start.

*** Install OSX package on OSX machine                                :infra:

We need to install and run the windows package and make sure it works. Check
console and GUI start.

*** Add packaging support for images                                  :infra:

At present we are not adding images to packages.

*** Create a staging directory                                        :infra:

At present the binaries are scattered around the build directory. We should take
the same approach as Dogen and create clean directories for this.

*** Create an icon for the application                                :infra:

We copied the Dogen icon to get us going. We should really grab our own logo.

*** Add JSON parsing support for currency                              :code:

We need to have the ability to read and write currencies from JSON.

*** Add postgres support for currency                                  :code:

We need to have the ability to read and write currencies from a postgres
database.

*** Work through all types required for Example 1                      :code:

We want to be able to visualise all the data types needed in order to be able to
run the most basic example of ORE. For each of these types, create a stories.

The files are as follows. First, there are the files in the =Input= directory:

- [[https://github.com/OpenSourceRisk/Engine/tree/master/Examples/Example_1/Input][Example 1 Inputs]]

Specifically:

- =currencies.xml=
- =netting.xml=
- =ore.xml=
- =ore_swaption.xml=
- =plot.gp=
- =portfolio.xml=
- =portfolio_swap.xml=
- =portfolio_swap_20151023.xml=
- =portfolio_swaption.xml=
- =portfolio_swaption_20151023.xml=
- =simulation.xml=

In addition, we need all of the common inputs under:

- [[https://github.com/OpenSourceRisk/Engine/tree/master/Examples/Input][Examples - Common Inputs]]

These are:

- =calendaradjustment.xml=
- =conventions.xml=
- =currencies.xml=
- =curveconfig.xml=
- =fixings_20160205.txt=
- =market_20160205.txt=
- =market_20160205_flat.txt=
- =pricingengine.xml=
- =todaysmarket.xml=

Finally, we need support for the outputs. We can grab these from the expected
outputs:

- [[https://github.com/OpenSourceRisk/Engine/tree/master/Examples/Example_1/ExpectedOutput][Example 1 Expected Outputs]]

These are:

- =colva_nettingset_CPTY_A.csv=
- =curves.csv=
- =exposure_nettingset_CPTY_A.csv=
- =exposure_trade_Swap_20y.csv=
- =flows.csv=
- =log_progress.json=
- =netcube.csv=
- =npv.csv=
- =swaption_npv.csv=
- =xva.csv=

| Previous: [[id:154212FF-BB02-8D84-1E33-9338B458380A][Version Zero]] |
