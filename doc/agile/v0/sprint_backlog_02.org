:PROPERTIES:
:ID: 0DFDAF4D-E299-98E4-25C3-5BB6500E5BA8
:END:
#+title: Sprint Backlog 02
#+options: <:nil c:nil ^:nil d:nil date:nil author:nil toc:nil html-postamble:nil
#+todo: STARTED | COMPLETED CANCELLED POSTPONED BLOCKED
#+tags: { code(c) infra(i) analysis(n) agile(a) }
#+startup: inlineimages

* Sprint Mission

- Create basic project infrastructure.
- add client and server support.

* Stories

** Active

#+begin: clocktable :maxlevel 3 :scope subtree :tags t :indent nil :emphasize nil :scope file :narrow 75 :formula % :block today
#+TBLNAME: today_summary
#+CAPTION: Clock summary at [2025-10-23 Thu 09:20], for Thursday, October 23, 2025.
|       | <75>                                  |        |      |      |       |
| Tags  | Headline                              | Time   |      |      |     % |
|-------+---------------------------------------+--------+------+------+-------|
|       | *Total time*                          | *1:06* |      |      | 100.0 |
|-------+---------------------------------------+--------+------+------+-------|
|       | Stories                               | 1:06   |      |      | 100.0 |
|       | Active                                |        | 1:06 |      | 100.0 |
| agile | Sprint and product backlog refinement |        |      | 0:09 |  13.6 |
| infra | Update vcpkg to latest                |        |      | 0:57 |  86.4 |
#+end:

#+begin: clocktable :maxlevel 3 :scope subtree :tags t :indent nil :emphasize nil :scope file :narrow 75 :formula %
#+TBLNAME: sprint_summary
#+CAPTION: Clock summary at [2025-10-23 Thu 09:37]
|          | <75>                                               |         |       |      |       |
| Tags     | Headline                                           | Time    |       |      |     % |
|----------+----------------------------------------------------+---------+-------+------+-------|
|          | *Total time*                                       | *90:59* |       |      | 100.0 |
|----------+----------------------------------------------------+---------+-------+------+-------|
|          | Stories                                            | 90:59   |       |      | 100.0 |
|          | Active                                             |         | 90:59 |      | 100.0 |
| agile    | Sprint and product backlog refinement              |         |       | 2:45 |   3.0 |
| infra    | Fix imgui broken build                             |         |       | 0:36 |   0.7 |
| code     | Create a containing structure for data             |         |       | 0:35 |   0.6 |
| code     | Add temporal support to currencies                 |         |       | 2:59 |   3.3 |
| code     | Add command to dump currencies                     |         |       | 4:18 |   4.7 |
| code     | Refactor code for currencies                       |         |       | 3:52 |   4.2 |
| code     | Restore qt setup                                   |         |       | 2:20 |   2.6 |
| code     | Add gemini action                                  |         |       | 0:05 |   0.1 |
| code     | Remove ImGui support                               |         |       | 0:08 |   0.1 |
| code     | Create a GRPC based service                        |         |       | 2:09 |   2.4 |
| code     | Implement a 0MQ based RPC service and client       |         |       | 3:55 |   4.3 |
| code     | Fix misspell fixer errors                          |         |       | 0:08 |   0.1 |
| code     | Remove URL support from prog mode in emacs         |         |       | 0:14 |   0.3 |
| code     | Remove GRPC support                                |         |       | 0:16 |   0.3 |
| code     | Implement a cobalt based server and client         |         |       | 2:53 |   3.2 |
| code     | Add serialisation support for reflect-cpp          |         |       | 3:07 |   3.4 |
| analysis | White-boarding for new architecture                |         |       | 1:52 |   2.1 |
| code     | Use sqlgen for postgres                            |         |       | 7:23 |   8.1 |
| code     | Refactor cli to follow new project structure       |         |       | 4:47 |   5.3 |
| code     | Add tests to cli parser                            |         |       | 0:35 |   0.6 |
| code     | Add logging support for tests                      |         |       | 2:21 |   2.6 |
| code     | Replace XML parsing with reflect cpp               |         |       | 2:56 |   3.2 |
| code     | Fix windows and osx builds                         |         |       | 0:27 |   0.5 |
| code     | Completions in emacs org mode are incorrect        |         |       | 1:02 |   1.1 |
| analysis | Investigate bitemporal support from Postgres 18    |         |       | 1:47 |   2.0 |
| code     | Refactor core into risk                            |         |       | 4:10 |   4.6 |
| code     | Windows builds have cmake errors                   |         |       | 0:14 |   0.3 |
| infra    | Add suppression to valgrind errors                 |         |       | 0:38 |   0.7 |
| code     | Create a =comms= library                           |         |       | 8:05 |   8.9 |
| code     | Add messaging for risk                             |         |       | 8:00 |   8.8 |
| code     | Clean up repl code                                 |         |       | 0:46 |   0.8 |
| infra    | Investigate build warning for vcpkg binary caching |         |       | 0:25 |   0.5 |
| infra    | vcpkg caching seems disabled                       |         |       | 0:15 |   0.3 |
| infra    | Fix broken builds                                  |         |       | 0:58 |   1.1 |
| infra    | Update vcpkg to latest                             |         |       | 5:19 |   5.8 |
| code     | Add support for accounts and logins                |         |       | 7:44 |   8.5 |
| infra    | Investigate build warning for qtbase               |         |       | 0:10 |   0.2 |
| code     | Fix gemini cli action                              |         |       | 0:45 |   0.8 |
#+end:

*** COMPLETED Sprint and product backlog refinement                   :agile:
    :LOGBOOK:
    CLOCK: [2025-10-23 Thu 09:10]--[2025-10-23 Thu 09:19] =>  0:09
    CLOCK: [2025-10-14 Tue 15:31]--[2025-10-14 Tue 15:44] =>  0:13
    CLOCK: [2025-09-29 Mon 01:07]--[2025-09-29 Mon 01:12] =>  0:05
    CLOCK: [2025-09-29 Mon 00:50]--[2025-09-29 Mon 00:53] =>  0:03
    CLOCK: [2025-09-21 Sun 10:06]--[2025-09-21 Sun 10:34] =>  0:28
    CLOCK: [2025-09-21 Sun 10:01]--[2025-09-21 Sun 10:05] =>  0:04
    CLOCK: [2025-09-20 Sat 08:23]--[2025-09-20 Sat 08:44] =>  0:21
    CLOCK: [2024-07-28 Sun 22:40]--[2024-07-28 Sun 23:09] =>  0:29
    CLOCK: [2025-02-02 Sun 12:00]--[2025-02-02 Sun 12:53] =>  0:53
    :END:

Updates to sprint and product backlog.

#+begin_src emacs-lisp :exports none
;; agenda
(org-agenda-file-to-front)
#+end_src

#+name: stories-chart
#+begin_src R :var sprint_summary=sprint_summary :results file graphics :exports results :file sprint_backlog_02_stories.png :width 1200 :height 650
library(conflicted)
library(grid)
library(tidyverse)
library(tibble)

# Remove unnecessary rows.
clean_sprint_summary <- tail(sprint_summary, -4)
names <- unlist(clean_sprint_summary[2])
values <- as.numeric(unlist(clean_sprint_summary[6]))

# Create a data frame.
df <- data.frame(
  cost = values,
  stories = factor(names, levels = names[order(values, decreasing = FALSE)]),
  y = seq(length(names)) * 0.9
)

# Setup the colors
blue <- "#076fa2"

p <- ggplot(df) +
  aes(x = cost, y = stories) +
  geom_col(fill = blue, width = 0.6) +
  ggtitle("Sprint 2: Resourcing per Story") +
  xlab("Resourcing (%)") + ylab("Stories") +
  theme(text = element_text(size = 15))

print(p)
#+end_src

#+RESULTS: stories-chart
[[file:sprint_backlog_02_stories.png]]

#+name: tags-chart
#+begin_src R :var sprint_summary=sprint_summary :results file graphics :exports results :file sprint_backlog_02_tags.png :width 600 :height 400
library(conflicted)
library(grid)
library(tidyverse)
library(tibble)

# Remove unnecessary rows.
clean_sprint_summary <- tail(sprint_summary, -4)
names <- unlist(clean_sprint_summary[1])
values <- as.numeric(unlist(clean_sprint_summary[6]))

# Create a data frame.
df <- data.frame(
  cost = values,
  tags = names,
  y = seq(length(names)) * 0.9
)
# factor(names, levels = names[order(values, decreasing = FALSE)])

df2 <- setNames(aggregate(df$cost, by = list(df$tags), FUN = sum),  c("cost", "tags"))
# Setup the colors
blue <- "#076fa2"

p <- ggplot(df2) +
  aes(x = cost, y = tags) +
  geom_col(fill = blue, width = 0.6) +
  ggtitle("Sprint 1: Resourcing per Tag") +
  xlab("Resourcing (%)") + ylab("Story types") +
  theme(text = element_text(size = 15))

print(p)
#+end_src

#+RESULTS: tags-chart
[[file:sprint_backlog_02_tags.png]]

*** COMPLETED Fix imgui broken build                                 :infra:
    :LOGBOOK:
    CLOCK: [2025-02-02 Sun 12:54]--[2025-02-02 Sun 13:30] =>  0:36
   :END:

With the move to ImGui the builds started failing across the board.

Disable other OSs for now.

*** COMPLETED Create a containing structure for data                   :code:
    :LOGBOOK:
    CLOCK: [2025-02-03 Mon 22:07]--[2025-02-03 Mon 22:42] =>  0:35
    :END:

We need to be able to represent the data in the filesystem for the ORE samples
in a way that allows users to load and save the samples. The data in the
filesystem has the following structure:

- Examples
  - Example 1:
    - Input
    - ExpectedOutput, e.g. Output
  - Example 2
  - ...
  - Example n
  - Input

The overall context under which valuation is taking place needs a name. Options:

- environment
- workspace
- sandbox: seems to imply the data is not "real" but that is not always the
  case. This seems more like a label we could apply to the top-level container
  rather than its overall name.

Each entry within the top-level container is then itself another kind of
container. Options:

- namespace
- package

There are two types of these containers:

- libraries: components whose content is made to be shared with other
  components; and
- executables: components whose content is sufficient to execute computations.

- component, elements.

Elements within a component is of two kinds: input and output. However, this may
not necessarily be a good classification because some outputs can be used as
inputs to output other elements. Perhaps this is more of a tag.

Notes:

- move this analysis to documentation.

*** COMPLETED Add temporal support to currencies                       :code:
    :LOGBOOK:
    CLOCK: [2025-02-09 Sun 22:35]--[2025-02-09 Sun 23:18] =>  0:43
    CLOCK: [2025-02-08 Sat 20:51]--[2025-02-08 Sat 23:07] =>  2:16
    :END:

We need a simple way to keep track of changes. No need for bitemporal, just
single dimension.

Links:

- [[https://stackoverflow.com/questions/52426656/track-last-modification-timestamp-of-a-row-in-postgres][Track last modification timestamp of a row in Postgres]]

*** COMPLETED Add command to dump currencies                           :code:
    :LOGBOOK:
    CLOCK: [2025-02-12 Wed 23:46]--[2025-02-13 Thu 00:34] =>  0:48
    CLOCK: [2025-02-11 Tue 23:01]--[2025-02-11 Tue 23:42] =>  0:41
    CLOCK: [2025-02-11 Tue 22:13]--[2025-02-11 Tue 23:00] =>  0:47
    CLOCK: [2025-02-10 Mon 23:16]--[2025-02-10 Mon 23:58] =>  0:42
    CLOCK: [2025-02-10 Mon 22:35]--[2025-02-10 Mon 23:15] =>  0:40
    CLOCK: [2025-02-09 Sun 23:19]--[2025-02-09 Sun 23:59] =>  0:40
    :END:

We need:

- latest
- as of
- all for a given iso code.

Notes:

- add timestamp fields to domain objects.

*** CANCELLED Refactor code for currencies                             :code:
    :LOGBOOK:
    CLOCK: [2025-02-11 Tue 21:41]--[2025-02-11 Tue 22:06] =>  0:25
    CLOCK: [2025-02-11 Tue 20:55]--[2025-02-11 Tue 21:15] =>  0:20
    CLOCK: [2025-02-08 Sat 18:58]--[2025-02-08 Sat 19:37] =>  0:39
    CLOCK: [2025-02-08 Sat 16:30]--[2025-02-08 Sat 18:58] =>  2:28
    :END:

Links:

- [[https://technotes.blog/2023/01/24/getting-started-with-imgui-a-beginners-tutorial/][Getting Started with ImGui: A Beginner’s Tutorial]]
- [[https://stackoverflow.com/questions/38457309/how-to-use-libpqxx-to-receive-notifications-from-the-postgresql-database][How to use libpqxx to receive notifications from the PostgreSQL database?]]
- [[https://github.com/ocornut/imgui/issues/4478][Text color of disabled menu item is incorrect]]

*** COMPLETED Restore qt setup                                         :code:
    :LOGBOOK:
    CLOCK: [2025-08-07 Thu 18:02]--[2025-08-07 Thu 20:22] =>  2:20
    :END:

We will forge ahead with a QT UI, given the issues we had with imGui cross
platform. We can worry about it later.

*** COMPLETED Add gemini action                                        :code:
    :LOGBOOK:
    CLOCK: [2025-08-07 Thu 20:26]--[2025-08-07 Thu 20:31] =>  0:05
    :END:

#+begin_quote
To get started, download Gemini CLI 0.1.18 or later and run `/setup-github`.
#+end_quote

Links:

- [[https://github.com/google-github-actions/run-gemini-cli][GH run-gemini-cli]]
- [[https://blog.google/technology/developers/introducing-gemini-cli-github-actions][Meet your new AI coding teammate: Gemini CLI GitHub Actions]]

*** COMPLETED Remove ImGui support                                     :code:
    :LOGBOOK:
    CLOCK: [2025-08-10 Sun 13:41]--[2025-08-10 Sun 13:49] =>  0:08
    :END:

We never got it to compile under windows and osx.

*** CANCELLED Create a GRPC based service                              :code:
    :LOGBOOK:
    CLOCK: [2025-08-15 Fri 20:51]--[2025-08-15 Fri 21:04] =>  0:13
    CLOCK: [2025-08-10 Sun 14:10]--[2025-08-10 Sun 15:30] =>  1:20
    CLOCK: [2025-08-10 Sun 13:50]--[2025-08-10 Sun 14:09] =>  0:19
    CLOCK: [2025-08-10 Sun 13:20]--[2025-08-10 Sun 13:37] =>  0:17
    :END:

- *Reason:* GRPC is quite convoluted and generates weird code. Try first to
  build a simple RPC using ZeroMQ and see how hard it is.

Needs to be able to login, and retrieve currencies.

*** CANCELLED Implement a 0MQ based RPC service and client             :code:
    :LOGBOOK:
    CLOCK: [2025-09-18 Thu 13:57]--[2025-09-18 Thu 17:26] =>  3:29
    CLOCK: [2025-09-18 Thu 12:59]--[2025-09-18 Thu 13:25] =>  0:26
    :END:

*Rationale*: Actually we should experiment with raw asio first before adding
more complexity.

*** COMPLETED Fix misspell fixer errors                                :code:
    :LOGBOOK:
    CLOCK: [2025-09-20 Sat 14:50]--[2025-09-20 Sat 14:58] =>  0:08
    :END:

Error:

#+begin_src
misspell-fixer: -r Enable real run. Overwrite original files!
misspell-fixer: -s Enable showing of diffs.
misspell-fixer: -v Enable verbose mode.
misspell-fixer: -n Disable backups.
misspell-fixer: Target directories: .
misspell-fixer: Your grep version is +zstd which is at least the optimal: 2.28.
misspell-fixer: Iteration 0: prefiltering.
misspell-fixer: Results of prefiltering: (filename:line:pattern)
./doc/agile/v0/sprint_backlog_02.org:382:constraints
misspell-fixer: Iteration 0: processing.
misspell-fixer: actual file: ./doc/agile/v0/sprint_backlog_02.org
misspell-fixer: temp file: ./doc/agile/v0/sprint_backlog_02.org.64
misspell-fixer: misspellings are fixed!
misspell-fixer: Iteration 0: done.
misspell-fixer: Iteration 1: prefiltering.
misspell-fixer: Results of prefiltering: (filename:line:pattern)
misspell-fixer: Iteration 1: nothing to replace.
misspell-fixer: Iteration 1: done.
=================================

Error: Unable to process file command 'output' successfully.
Error: Invalid format '+++ ./doc/agile/v0/sprint_backlog_02.org.64	2025-09-20 10:57:51.112708427 +0000'
#+end_src

The problem may be related to the error in the URL.

*** COMPLETED Remove URL support from prog mode in emacs               :code:
    :LOGBOOK:
    CLOCK: [2025-09-20 Sat 15:26]--[2025-09-20 Sat 15:40] =>  0:14
    :END:

*** COMPLETED Remove GRPC support                                      :code:
    :LOGBOOK:
    CLOCK: [2025-09-20 Sat 11:51]--[2025-09-20 Sat 12:07] =>  0:16
    :END:

- remove code using GRPC, leave only server and client skeletons.

*** COMPLETED Implement a cobalt based server and client               :code:
    :LOGBOOK:
    CLOCK: [2025-09-21 Sun 00:41]--[2025-09-21 Sun 01:16] =>  0:35
    CLOCK: [2025-09-20 Sat 21:02]--[2025-09-20 Sat 21:38] =>  0:36
    CLOCK: [2025-09-20 Sat 17:44]--[2025-09-20 Sat 18:20] =>  0:36
    CLOCK: [2025-09-20 Sat 17:16]--[2025-09-20 Sat 17:43] =>  0:27
    CLOCK: [2025-09-20 Sat 16:36]--[2025-09-20 Sat 17:15] =>  0:39
    :END:

Using the examples, create a really simple server and client. Must use SSL.

Links:

- [[https://www.boost.org/doc/libs/latest/libs/cobalt/doc/html/index.html][cobalt docs]]
- [[https://github.com/boostorg/cobalt][GH cobalt]]

*** COMPLETED Add serialisation support for reflect-cpp                :code:
    :LOGBOOK:
    CLOCK: [2025-09-24 Wed 10:02]--[2025-09-24 Wed 12:37] =>  2:35
    CLOCK: [2025-09-23 Tue 11:10]--[2025-09-23 Tue 11:33] =>  0:23
    CLOCK: [2025-09-23 Tue 11:01]--[2025-09-23 Tue 11:10] =>  0:09
    :END:

Links:

- [[https://github.com/getml/reflect-cpp/][GH reflect-cpp]]

*** COMPLETED White-boarding for new architecture                  :analysis:
    :LOGBOOK:
    CLOCK: [2025-09-25 Thu 12:55]--[2025-09-25 Thu 13:03] =>  0:08
    CLOCK: [2025-09-25 Thu 11:01]--[2025-09-25 Thu 12:45] =>  1:44
    :END:

Spend some time with AI to figure out an initial architecture for the system.
Does not have to be perfect but must follow the data oriented principles we are
trying to exercise.

Notes:

- each subsystem should have all related functionality:
  - risk: domain types for ORE, ORE adapters, DB support, messages, managers
    with rings, table dispatchers.
  - comms: basic asio and cobalt infrastructure. Frame, message sizes and its
    handling, socket handling, generic subsystem dispatcher. Frame needs to have
    a subsystem ID and a message ID. Basic asio server and client.
- client library contains a wrapper around client functionality, by subsystem.
  Each should have their own "client".
- server project contains the runnable service, at the start supporting all
  subsystems. In the future we can split these into multiple servers.
- console (cli) calls client library to exercise it.
- Consider naming server and client after the protocol (nexus).
- HTTP is implemented as a separate server.

*** COMPLETED Use sqlgen for postgres                                  :code:
    :LOGBOOK:
    CLOCK: [2025-09-26 Fri 15:54]--[2025-09-26 Fri 17:02] =>  1:08
    CLOCK: [2025-09-26 Fri 12:17]--[2025-09-26 Fri 13:19] =>  1:02
    CLOCK: [2025-09-26 Fri 11:18]--[2025-09-26 Fri 12:17] =>  0:59
    CLOCK: [2025-09-26 Fri 09:38]--[2025-09-26 Fri 11:02] =>  1:24
    CLOCK: [2025-09-25 Thu 23:01]--[2025-09-25 Thu 23:56] =>  0:55
    CLOCK: [2025-09-25 Thu 16:01]--[2025-09-25 Thu 17:03] =>  1:02
    CLOCK: [2025-09-24 Wed 13:00]--[2025-09-24 Wed 13:53] =>  0:53
    :END:

Notes:

- it would be nice to be able to support SQLite as well. However, there is no
  common connection class, so we need to use templates.

Links:

- [[https://github.com/getml/sqlgen/][GH sqlgen]]
- [[https://github.com/getml/sqlgen/issues/52][#52: Support for temporal data]]

*** CANCELLED Add console method to drop schema for a table or all tables :code:

*Rationale*: We need to create the schema manually anyways.

We may need to update the SQL from sqlgen. This will make life easier.

*** COMPLETED Refactor cli to follow new project structure             :code:
    :LOGBOOK:
    CLOCK: [2025-09-27 Sat 09:39]--[2025-09-27 Sat 10:32] =>  0:53
    CLOCK: [2025-09-27 Sat 09:00]--[2025-09-27 Sat 09:29] =>  0:29
    CLOCK: [2025-09-26 Fri 22:45]--[2025-09-27 Sat 00:11] =>  1:26
    CLOCK: [2025-09-26 Fri 21:48]--[2025-09-26 Fri 22:13] =>  0:25
    CLOCK: [2025-09-26 Fri 20:21]--[2025-09-26 Fri 21:42] =>  1:21
    CLOCK: [2025-09-26 Fri 19:12]--[2025-09-26 Fri 19:25] =>  0:13
    :END:

As defined in analysis story, refactor CLI with new approach.

*** COMPLETED Add tests to cli parser                                  :code:
    :LOGBOOK:
    CLOCK: [2025-09-27 Sat 20:50]--[2025-09-27 Sat 21:02] =>  0:12
    CLOCK: [2025-09-27 Sat 14:01]--[2025-09-27 Sat 14:24] =>  0:23
    :END:

*** COMPLETED Add logging support for tests                            :code:
    :LOGBOOK:
    CLOCK: [2025-09-28 Sun 09:51]--[2025-09-28 Sun 12:12] =>  2:21
    :END:

At present we are not able to see logs for tests.

*** COMPLETED Rename =core= to =risk=                                  :code:

We need to distinguish between the types in =comms= etc and the core types for
domain modeling. We need a good name for this.

*** COMPLETED Replace XML parsing with reflect cpp                     :code:
    :LOGBOOK:
    CLOCK: [2025-09-28 Sun 23:03]--[2025-09-29 Mon 00:49] =>  1:46
    CLOCK: [2025-09-28 Sun 21:16]--[2025-09-28 Sun 22:26] =>  1:10
    :END:

We need to see if we can parse ORE XML using reflect cpp instead of hand crafted
code.

Links:

- [[https://rfl.getml.com/variants_and_tagged_unions/][std::variant, rfl::Variant and rfl::TaggedUnion]]

*** COMPLETED Fix windows and osx builds                               :code:
    :LOGBOOK:
    CLOCK: [2025-09-20 Sat 14:58]--[2025-09-20 Sat 15:25] =>  0:27
    :END:

Issue was related to YAML spaces. GitHub copilot:

#+begin_quote
Analysis:

- The push trigger covers pushes to main and any tags.
- The problem is that pull_request is indented under push, making it a property
  of push (which is not valid YAML for GitHub Actions).
- In GitHub Actions, push and pull_request must be sibling keys under on:.
- Result: Your pull request builds are not being triggered on Windows, because
  the pull_request trigger is incorrectly nested.
#+end_quote

*** COMPLETED Completions in emacs org mode are incorrect              :code:
    :LOGBOOK:
    CLOCK: [2025-09-21 Sun 11:28]--[2025-09-21 Sun 11:44] =>  0:16
    CLOCK: [2025-09-21 Sun 11:16]--[2025-09-21 Sun 11:27] =>  0:11
    CLOCK: [2025-09-21 Sun 10:40]--[2025-09-21 Sun 11:15] =>  0:35
    :END:

At present we are getting random lisp snippets when filling in agile backlogs.

Does not solve all the problems but helps:

#+begin_src emacs-lisp
(defun cunene/org-mode-hook ()
  "Hook to run in org mode."
  ;; Make sure Org's native completions are prioritized
  (setq-local completion-at-point-functions
              (append (list #'org-pcomplete-initial) ; Org's native completion
                      completion-at-point-functions)))

#+end_src

Notes:

- fixed assorted ilist issues.
- fixed completion on git commit.

*** COMPLETED Investigate bitemporal support from Postgres 18      :analysis:
    :LOGBOOK:
    CLOCK: [2025-08-08 Fri 08:27]--[2025-08-08 Fri 09:09] =>  0:42
    CLOCK: [2025-08-08 Fri 08:24]--[2025-08-08 Fri 08:26] =>  0:02
    CLOCK: [2025-08-07 Thu 23:51]--[2025-08-07 Thu 23:59] =>  0:08
    CLOCK: [2025-08-07 Thu 22:12]--[2025-08-07 Thu 23:07] =>  0:55
    :END:

Links:

- [[https://hdombrovskaya.wordpress.com/2024/05/05/3937/][(Bi)Temporal Tables, PostgreSQL and SQL Standard]]
- [[https://neon.com/postgresql/postgresql-18/temporal-constraints][PostgreSQL 18 Temporal Constraints]]
- [[https://www.depesz.com/2024/10/03/waiting-for-postgresql-18-add-temporal-foreign-key-constraints/][Waiting for PostgreSQL 18 – Add temporal FOREIGN KEY constraints]]
- [[https://neon.com/postgresql/postgresql-tutorial/postgresql-identity-column][PostgreSQL Identity Column]]
- [[https://wiki.postgresql.org/wiki/SQL2011Temporal][SQL2011Temporal]]
- [[https://neon.com/postgresql/postgresql-18-new-features][PostgreSQL 18 New Features]]
- [[https://lord.technology/2025/01/28/understanding-temporal-primary-keys.html][Understanding Bitemporal Primary Keys]]
- [[https://hypirion.com/musings/implementing-system-versioned-tables-in-postgres][Implementing System-Versioned Tables in Postgres]]
- [[https://clarkdave.net/2015/02/historical-records-with-postgresql-and-temporal-tables-and-sql-2011/][Historical records with PostgreSQL, temporal tables and SQL:2011]]
- [[https://github.com/arkhipov/temporal_tables][GH temporal_tables]]
- [[https://learn.microsoft.com/en-us/sql/relational-databases/tables/querying-data-in-a-system-versioned-temporal-table?view=sql-server-ver17][Query data in a system-versioned temporal table]]

*** COMPLETED Refactor core into risk                                  :code:
    :LOGBOOK:
    CLOCK: [2025-09-29 Mon 00:54]--[2025-09-29 Mon 01:06] =>  0:12
    CLOCK: [2025-09-28 Sun 20:20]--[2025-09-28 Sun 20:50] =>  0:30
    CLOCK: [2025-09-27 Sat 23:56]--[2025-09-28 Sun 01:02] =>  1:06
    CLOCK: [2025-09-27 Sat 23:01]--[2025-09-27 Sat 23:56] =>  0:55
    CLOCK: [2025-09-27 Sat 21:03]--[2025-09-27 Sat 22:30] =>  1:27
    :END:

As per the new architecture, we should have all the services within each
subsystem.

Notes:

- merge tests into the project. Actually this screws up the include paths, for
  not a huge advantage. Cancelling it.
- clean up properties in domain entities.

*** COMPLETED Windows builds have cmake errors                         :code:
    :LOGBOOK:
    CLOCK: [2025-09-29 Mon 11:21]--[2025-09-29 Mon 11:35] =>  0:14
    :END:

#+begin_quote
Error:   Target "ores.risk.lib" links to:
Error(s) when configuring the project
CMake Error at D:/a/OreStudio/OreStudio/CTest.cmake:276 (message):
Error:   Failed to configure

    pugixml::static

  but the target was not found.  Possible reasons include:

    * There is a typo in the target name.
    * A find_package call is missing for an IMPORTED target.
    * An ALIAS target is missing.
#+end_quote

*** COMPLETED Add suppression to valgrind errors                      :infra:
    :LOGBOOK:
    CLOCK: [2025-09-30 Tue 09:40]--[2025-09-30 Tue 09:48] =>  0:08
    CLOCK: [2025-09-28 Sun 09:20]--[2025-09-28 Sun 09:50] =>  0:30
    :END:

We are getting spurious memory leaks:

#+begin_src
{
   Memcheck:Leak
   match-leak-kinds: reachable
   fun:malloc
   obj:/home/runner/work/_temp/-1583124222/cmake-4.1.1-linux-x86_64/bin/cmake
   obj:/home/runner/work/_temp/-1583124222/cmake-4.1.1-linux-x86_64/bin/cmake
   fun:__libc_start_main@@GLIBC_2.34
   obj:/home/runner/work/_temp/-1583124222/cmake-4.1.1-linux-x86_64/bin/cmake
   obj:*
   obj:*
#+end_src


*** COMPLETED Create a =comms= library                                 :code:
    :LOGBOOK:
    CLOCK: [2025-10-15 Wed 17:18]--[2025-10-15 Wed 17:57] =>  0:39
    CLOCK: [2025-10-15 Wed 15:32]--[2025-10-15 Wed 17:00] =>  1:28
    CLOCK: [2025-10-15 Wed 09:55]--[2025-10-15 Wed 11:41] =>  1:46
    CLOCK: [2025-10-14 Tue 18:59]--[2025-10-14 Tue 19:10] =>  0:11
    CLOCK: [2025-10-14 Tue 18:22]--[2025-10-14 Tue 18:48] =>  0:26
    CLOCK: [2025-10-14 Tue 15:45]--[2025-10-14 Tue 18:10] =>  2:25
    CLOCK: [2025-09-23 Tue 09:30]--[2025-09-23 Tue 10:15] =>  0:45
    CLOCK: [2025-09-22 Mon 17:27]--[2025-09-22 Mon 17:50] =>  0:23
    CLOCK: [2025-09-22 Mon 16:11]--[2025-09-22 Mon 16:12] =>  0:01
    CLOCK: [2025-09-21 Sun 11:45]--[2025-09-21 Sun 11:46] =>  0:01
    :END:

Move comms related code to it's own library.

Tasks:

- add options for port, key file etc.
- add support for environment variables.

#+begin_src c++
// Parse environment variables (prefix "MYAPP_")
po::store(po::parse_environment(desc, "MYAPP_"), vm);
#+end_src

- refactor server and client code into their own classes.

*** COMPLETED Add messaging for risk                                   :code:
    :LOGBOOK:
    CLOCK: [2025-10-20 Mon 23:36]--[2025-10-21 Tue 00:35] =>  0:59
    CLOCK: [2025-10-20 Mon 15:30]--[2025-10-20 Mon 18:11] =>  2:41
    CLOCK: [2025-10-20 Mon 10:20]--[2025-10-20 Mon 12:30] =>  2:10
    CLOCK: [2025-10-15 Wed 23:01]--[2025-10-16 Thu 01:11] =>  2:10
    :END:

We need to setup the infrastructure for messaging within the risk subsystem.

*** COMPLETED Clean up repl code                                       :code:
    :LOGBOOK:
    CLOCK: [2025-10-21 Tue 00:36]--[2025-10-21 Tue 01:22] =>  0:46
    :END:

Move all of the code in application related to repl into it's own class and tidy
it up.

*** COMPLETED Investigate build warning for vcpkg binary caching      :infra:
    :LOGBOOK:
    CLOCK: [2025-09-21 Sun 09:25]--[2025-09-21 Sun 09:50] =>  0:25
    :END:

At present we are getting:

#+begin_src
Additional packages (*) will be modified to complete this operation.
$VCPKG_BINARY_SOURCES: warning: The 'x-gha' binary caching backend has been removed. Consider using a NuGet-based binary caching provider instead, see extended documentation at https://learn.microsoft.com/vcpkg/users/binarycaching?WT.mc_id=vcpkg_inproduct_cli.
  on expression: clear;x-gha,readwrite
#+end_src

Raised:

- [[https://github.com/lukka/run-vcpkg/issues/253][#253: Addressing vcpkg warning related to binary caching]]

*** COMPLETED vcpkg caching seems disabled                            :infra:
    :LOGBOOK:
    CLOCK: [2025-09-21 Sun 10:06]--[2025-09-21 Sun 10:21] =>  0:15
    :END:

It seems caching is not kicking in so builds are very slow.

*** COMPLETED Fix broken builds                                       :infra:
    :LOGBOOK:
    CLOCK: [2025-10-21 Tue 08:50]--[2025-10-21 Tue 09:10] =>  0:20
    CLOCK: [2025-10-15 Wed 21:01]--[2025-10-15 Wed 21:39] =>  0:38
    :END:

After latest comms changes, the builds got borked.

*** COMPLETED Update vcpkg to latest                                  :infra:
    :LOGBOOK:
    CLOCK: [2025-10-23 Thu 00:49]--[2025-10-23 Thu 00:58] =>  0:09
    CLOCK: [2025-10-22 Wed 23:35]--[2025-10-23 Thu 00:48] =>  1:13
    CLOCK: [2025-10-22 Wed 15:55]--[2025-10-22 Wed 16:59] =>  1:04
    CLOCK: [2025-10-22 Wed 13:01]--[2025-10-22 Wed 15:54] =>  2:53
    :END:

We need to get latest vcpkg as we haven't updated in a while.

Notes:

- latest sqlgen seems borked.

Links:

- [[https://github.com/getml/sqlgen/issues/70][#70: Problem with queries and schemas after v0.3.0 update]]
- [[https://github.com/getml/sqlgen/issues/69][#69: Handling of boolean values on postgres]]
- [[https://github.com/getml/sqlgen/issues/68][#68: Deallocating prepared statements on error]]

*** COMPLETED Add support for accounts and logins                      :code:
    :LOGBOOK:
    CLOCK: [2025-10-22 Wed 11:34]--[2025-10-22 Wed 11:50] =>  0:16
    CLOCK: [2025-10-21 Tue 23:42]--[2025-10-22 Wed 01:24] =>  1:42
    CLOCK: [2025-10-21 Tue 17:05]--[2025-10-21 Tue 18:30] =>  1:25
    CLOCK: [2025-10-21 Tue 14:12]--[2025-10-21 Tue 15:05] =>  0:53
    CLOCK: [2025-10-21 Tue 09:27]--[2025-10-21 Tue 12:55] =>  3:28
    :END:

Add the database tables, messages, commands etc to support logins.

Prompt:

#+begin_quote
In the project ores.accounts, add support for account management. It will
include login and logout, password management, account locking and all the
standard account management features. Implementation will be done in steps. Use
the appropriate c++ 23 types, using boost where necessary to model the suggested
fields. Add comments to all fields. Follow the exact same pattern as the risk
project for both folder structure as well as the code.

First we need a new class in a domain folder called account with the key fields:

- int Version
- string ModifiedBy
- GUID Id
- string Username
- string PasswordHash
- string PasswordSalt
- string TotpSecret
- string Email
- bool IsAdmin

Then we need a class called logins with the following fields:

- GUID AccountId
- string LastIp
- string LastAttemptIp
- int FailedLogins
- bool Locked
- DateTime LastLogin
- bool Online

Once I am happy with the code you generate, I will give you instructions for the
next steps.
#+end_quote

#+begin_quote
I want to add a new class to accounts responsible for password management. Think
of a good name. create a new folder for it, suitably named. It's job will be to
create a password hash given a password, a hash and a salt using HMACSHA512.
then add a verify password hash method which returns true if the password hashes
correctly. Tell me what your implmementation plan is before you start.
#+end_quote

problems:

- errors in create account request drop connection, should return an error.
- login insertion is not transactional, should rollback with account.
- ERROR:  prepared statement "sqlgen_insert_into_table" already exists
- test email_unique_idx

Links:

- [[https://github.com/getml/sqlgen/issues/68][#68: Deallocating prepared statements on error]]

*** POSTPONED Investigate build warning for qtbase                    :infra:
    :LOGBOOK:
    CLOCK: [2025-09-21 Sun 09:51]--[2025-09-21 Sun 10:01] =>  0:10
    :END:

At present we are getting:

#+begin_src
Building qtbase[brotli,concurrent,core,dbus,dnslookup,doubleconversion,egl,fontconfig,freetype,gui,harfbuzz,icu,jpeg,network,opengl,openssl,pcre2,png,sql,sql-psql,sql-sqlite,testlib,thread,widgets,xcb,xcb-xlib,xkb,xkbcommon-x11,xlib,xrender,zstd]:x64-linux@6.8.3#5...
CMake Warning at ports/qtbase/portfile.cmake:49 (message):
  qtbase currently requires packages from the system package manager.  They
  can be installed on Ubuntu systems via sudo apt-get install '^libxcb.*-dev'
  libx11-xcb-dev libglu1-mesa-dev libxrender-dev libxi-dev libxkbcommon-dev
  libxkbcommon-x11-dev libegl1-mesa-dev.
#+end_src

According to grok:

#+begin_quote
The CMake warning from ports/qtbase/portfile.cmake indicates that the qtbase
package in vcpkg requires additional system dependencies (like libxcb and
others) to be installed on your system, specifically for Ubuntu. This warning
appears because vcpkg detects that these dependencies are not satisfied. To
remove the warning, you need to install the required system packages or suppress
the warning if you’re sure the dependencies are met or not needed.
#+end_quote

We seem to be installing all of the required libraries on our script. We may
need to:

#+begin_src bash
export VCPKG_DISABLE_SYSTEM_PACKAGE_CHECK=1
#+end_src

*** POSTPONED Fix gemini cli action                                    :code:
    :LOGBOOK:
    CLOCK: [2025-09-20 Sat 15:50]--[2025-09-20 Sat 16:35] =>  0:45
    :END:

The action to review PRs using gemini is failing.
