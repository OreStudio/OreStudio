:PROPERTIES:
:ID: 34EDDBB5-CB52-35C4-E123-E0A70FB32799
:END:
#+title: Sprint Backlog 01
#+options: date:nil toc:nil author:nil num:nil
#+todo: STARTED | COMPLETED CANCELLED POSTPONED
#+tags: { story(s) epic(e) spike(p) }
#+startup: inlineimages

* Sprint Goals

- Create basic project infrastructure.
- Handle currencies front to back.

* Stories

** Active

#+begin: clocktable :maxlevel 3 :scope subtree :indent nil :emphasize nil :scope file :narrow 75 :formula %
#+TBLNAME: summary
#+CAPTION: Clock summary at [2024-07-06 Sat 08:46]
| <75>                                              |         |       |      |       |
| Headline                                          | Time    |       |      |     % |
|---------------------------------------------------+---------+-------+------+-------|
| *Total time*                                      | *39:22* |       |      | 100.0 |
|---------------------------------------------------+---------+-------+------+-------|
| Stories                                           | 39:22   |       |      | 100.0 |
| Active                                            |         | 39:22 |      | 100.0 |
| Sprint and product backlog refinement             |         |       | 1:18 |   3.3 |
| Create a basic git hub repository                 |         |       | 0:35 |   1.5 |
| Setup a discord channel for the project           |         |       | 0:14 |   0.6 |
| Setup vcpkg and cmake                             |         |       | 1:21 |   3.4 |
| Setup github actions                              |         |       | 1:21 |   3.4 |
| Create and upload a package                       |         |       | 3:28 |   8.8 |
| Create a basic project structure                  |         |       | 2:10 |   5.5 |
| Add a Qt hello world                              |         |       | 3:08 |   8.0 |
| Add a splash screen to applciation                |         |       | 0:41 |   1.7 |
| Add basic site                                    |         |       | 0:34 |   1.4 |
| Add modeling infrastructure                       |         |       | 1:30 |   3.8 |
| Fix code syntax highlighting in site              |         |       | 0:10 |   0.4 |
| Merge index with readme                           |         |       | 0:42 |   1.8 |
| Add project objective to readme                   |         |       | 2:24 |   6.1 |
| Add basic logging support                         |         |       | 1:14 |   3.1 |
| Add nightly support with memcheck                 |         |       | 3:21 |   8.5 |
| Clean up toolchains and presets                   |         |       | 1:53 |   4.8 |
| Generate Doxygen documentation and add it to site |         |       | 0:51 |   2.2 |
| Copy domain notes on core concepts                |         |       | 4:17 |  10.9 |
| Valgrind fails to run unit tests                  |         |       | 1:12 |   3.0 |
| Initial sanity test generated packages            |         |       | 0:25 |   1.1 |
| Clang tests show up twice in nighlies             |         |       | 0:04 |   0.2 |
| Add command line options support                  |         |       | 3:06 |   7.9 |
| Add XML parsing support for currency              |         |       | 1:24 |   3.6 |
| Create a containing structure for data            |         |       | 0:28 |   1.2 |
| Add basic widgets to display currencies           |         |       | 0:26 |   1.1 |
| Convert plantuml diagrams to org-babel            |         |       | 1:05 |   2.8 |
#+end:

#+name: piechart
#+begin_src R :results file graphics :file sprint_backlog_01.png :var summary=summary :width 1000 :height 600 :exports results
clean <- tail(summary, -4)
pie(as.numeric(clean[,5]), labels = clean[,1])
#+end_src

#+RESULTS: piechart
[[file:sprint_backlog_01.png]]

Agenda:

#+begin_src emacs-lisp :exports none
(org-agenda-file-to-front)
#+end_src

*** STARTED Sprint and product backlog refinement                     :story:
    :LOGBOOK:
    CLOCK: [2024-07-05 Fri 23:13]--[2024-07-05 Fri 23:26] =>  0:13
    CLOCK: [2024-07-02 Tue 07:40]--[2024-07-02 Tue 07:50] =>  0:10
    CLOCK: [2024-06-29 Sat 00:46]--[2024-06-29 Sat 00:54] =>  0:08
    CLOCK: [2024-06-26 Wed 23:27]--[2024-06-26 Wed 23:43] =>  0:16
    CLOCK: [2024-06-25 Tue 19:06]--[2024-06-25 Tue 19:11] =>  0:05
    CLOCK: [2024-06-23 Sun 16:50]--[2024-06-23 Sun 16:54] =>  0:04
    CLOCK: [2024-06-23 Sun 16:00]--[2024-06-23 Sun 16:08] =>  0:08
    CLOCK: [2024-06-22 Sat 23:14]--[2024-06-22 Sat 23:20] =>  0:06
    CLOCK: [2024-06-22 Sat 23:10]--[2024-06-22 Sat 23:13] =>  0:03
    CLOCK: [2024-06-15 Sat 21:16]--[2024-06-15 Sat 21:21] =>  0:05
    :END:

Updates to sprint and product backlog.

*** COMPLETED Create a basic git hub repository                       :story:
    :LOGBOOK:
    CLOCK: [2024-06-15 Sat 21:03]--[2024-06-15 Sat 21:15] =>  0:18
    CLOCK: [2024-06-15 Sat 20:40]--[2024-06-15 Sat 21:03] =>  0:23
    :END:

- add a new organisation and repo.
- add a simple project with vcpkg support.

*** COMPLETED Setup a discord channel for the project                 :story:
    :LOGBOOK:
    CLOCK: [2024-06-22 Sat 14:28]--[2024-06-22 Sat 14:42] =>  0:14
    :END:

Created VisualOre and setup emacs to connect to it.

Links:

- [[https://github.com/sm00th/bitlbee-discord][bitlbee-discord]]
- [[https://www.emacswiki.org/emacs/BitlBee][emacs wiki BitlBee]]
- [[https://aliquote.org/post/discord-bitlbee/][Discord on Emacs]]

*** COMPLETED Setup vcpkg and cmake                                   :story:
    :LOGBOOK:
    CLOCK: [2024-06-22 Sat 15:51]--[2024-06-22 Sat 16:30] =>  0:39
    CLOCK: [2024-06-22 Sat 15:15]--[2024-06-22 Sat 15:26] =>  0:11
    CLOCK: [2024-06-22 Sat 14:43]--[2024-06-22 Sat 15:14] =>  0:31
   :END:

Setup a basic build with vcpkg.

*** COMPLETED Setup github actions                                    :story:
    :LOGBOOK:
    CLOCK: [2024-06-22 Sat 18:50]--[2024-06-22 Sat 19:27] =>  0:37
    CLOCK: [2024-06-22 Sat 17:45]--[2024-06-22 Sat 18:09] =>  0:24
    CLOCK: [2024-06-22 Sat 16:30]--[2024-06-22 Sat 16:50] =>  0:20
    :END:

Get a basic green build in github, showing up in CDash.

*** COMPLETED Create and upload a package                             :story:
    :LOGBOOK:
    CLOCK: [2024-06-22 Sat 22:45]--[2024-06-22 Sat 23:09] =>  0:24
    CLOCK: [2024-06-22 Sat 21:41]--[2024-06-22 Sat 22:44] =>  1:03
    CLOCK: [2024-06-22 Sat 19:28]--[2024-06-22 Sat 21:29] =>  2:01
    :END:

We should create a basic package, and upload it to github.

*** COMPLETED Create a basic project structure                        :story:
    :LOGBOOK:
    CLOCK: [2024-06-22 Sat 13:57]--[2024-06-22 Sat 14:10] =>  0:13
    CLOCK: [2024-06-22 Sat 12:00]--[2024-06-22 Sat 13:57] =>  1:57
    :END:

We need to decide on the basic architecture for the project. As this is a
side-project, mainly for learning about ORE, it is going to be very simple: one
or more fat clients connecting to a postgres database. We don't mind having
business logic in the database; the most important thing is for it to be really
quick to add new features with the least amount of layers and duplication.

*** COMPLETED Add a Qt hello world                                    :story:
    :LOGBOOK:
    CLOCK: [2024-06-23 Sun 15:02]--[2024-06-23 Sun 15:15] =>  0:13
    CLOCK: [2024-06-23 Sun 10:19]--[2024-06-23 Sun 10:29] =>  0:10
    CLOCK: [2024-06-23 Sun 10:08]--[2024-06-23 Sun 10:18] =>  0:10
    CLOCK: [2024-06-23 Sun 09:50]--[2024-06-23 Sun 10:07] =>  0:17
    CLOCK: [2024-06-23 Sun 08:17]--[2024-06-23 Sun 09:49] =>  1:32
    CLOCK: [2024-06-23 Sun 00:20]--[2024-06-23 Sun 00:45] =>  0:25
    CLOCK: [2024-06-22 Sat 23:53]--[2024-06-23 Sun 00:14] =>  0:21
    :END:

Create a trivial application in Qt that exercises the pipelines.

*** COMPLETED Add a splash screen to applciation                      :story:
    :LOGBOOK:
    CLOCK: [2024-06-23 Sun 16:09]--[2024-06-23 Sun 16:50] =>  0:41
    :END:

It would be nice to have a simple splash screen with the project logo.

#+begin_src c++
#include "mainwindow.h"
#include <QApplication>
#include <QSplashScreen>
#include <QTimer>

int main(int argc, char *argv[])
{
    QApplication a(argc, argv);

    QSplashScreen *splash = new QSplashScreen;
    splash->setPixmap(QPixmap("C:/Users/9589693153/Desktop/Vids/pk.png"));
    splash->show();

    MainWindow w;

    QTimer::singleShot(5000, splash, SLOT(close()));
    QTimer::singleShot(5000, &w, SLOT(show()));

    // w.show();

    return a.exec();
}
#+end_src

*** COMPLETED Add basic site                                          :story:
    :LOGBOOK:
    CLOCK: [2024-06-28 Fri 22:50]--[2024-06-28 Fri 23:13] =>  0:23
    CLOCK: [2024-06-28 Fri 08:05]--[2024-06-28 Fri 08:16] =>  0:11
    :END:

We need a basic website for the project.

*** COMPLETED Add modeling infrastructure                             :story:
   :LOGBOOK:
   CLOCK: [2024-06-29 Sat 00:34]--[2024-06-29 Sat 00:45] =>  0:11
   CLOCK: [2024-06-28 Fri 23:14]--[2024-06-29 Sat 00:33] =>  1:19
   :END:

We need to be able to draw some simple PlantUML diagrams to describe the code as
we go along. They should be linked to the documentation.

*** COMPLETED Exclude vcpkg directories from coverage                 :story:

At present coverage is very low because its picking up some files from vcpkg
install. We need to ignore those.

*** COMPLETED Fix code syntax highlighting in site                    :story:
    :LOGBOOK:
    CLOCK: [2024-06-29 Sat 17:30]--[2024-06-29 Sat 17:40] =>  0:10
    :END:

For some reason we are not getting syntax highlighting in the website.

*** COMPLETED Merge index with readme                                 :story:
    :LOGBOOK:
    CLOCK: [2024-06-29 Sat 18:15]--[2024-06-29 Sat 18:33] =>  0:18
    CLOCK: [2024-06-29 Sat 17:50]--[2024-06-29 Sat 18:14] =>  0:24
    :END:

Its a bit annoying to have both a =readme= and an =index= file, since they are
both just landing pages. Look into merging them.

*** COMPLETED Add project objective to readme                         :story:
    :LOGBOOK:
    CLOCK: [2024-07-04 Thu 08:29]--[2024-07-04 Thu 08:36] =>  0:07
    CLOCK: [2024-06-29 Sat 22:55]--[2024-06-29 Sat 23:28] =>  0:33
    CLOCK: [2024-06-29 Sat 20:50]--[2024-06-29 Sat 20:55] =>  0:05
    CLOCK: [2024-06-29 Sat 19:05]--[2024-06-29 Sat 20:44] =>  1:39
    :END:

Explain the objective of the project and the approach.

*** COMPLETED Add basic logging support                               :story:
   :LOGBOOK:
   CLOCK: [2024-06-28 Fri 22:02]--[2024-06-28 Fri 22:32] =>  0:30
   CLOCK: [2024-06-28 Fri 00:00]--[2024-06-28 Fri 00:44] =>  0:44
   :END:

Copy across from dogen basic logging.

*** COMPLETED Add nightly support with memcheck                       :story:
    :LOGBOOK:
    CLOCK: [2024-07-02 Tue 21:48]--[2024-07-02 Tue 21:58] =>  0:10
    CLOCK: [2024-07-02 Tue 07:50]--[2024-07-02 Tue 08:18] =>  0:28
    CLOCK: [2024-06-30 Sun 09:32]--[2024-06-30 Sun 09:50] =>  0:18
    CLOCK: [2024-06-29 Sat 14:00]--[2024-06-29 Sat 14:12] =>  0:12
    CLOCK: [2024-06-29 Sat 08:42]--[2024-06-29 Sat 09:15] =>  0:33
    CLOCK: [2024-06-28 Fri 07:45]--[2024-06-28 Fri 08:04] =>  0:19
    CLOCK: [2024-06-27 Thu 23:00]--[2024-06-27 Thu 23:21] =>  0:21
    CLOCK: [2024-06-27 Thu 22:40]--[2024-06-27 Thu 22:59] =>  0:19
    CLOCK: [2024-06-26 Wed 19:30]--[2024-06-26 Wed 19:44] =>  0:14
    CLOCK: [2024-06-25 Tue 18:22]--[2024-06-25 Tue 18:32] =>  0:10
    CLOCK: [2024-06-24 Mon 22:40]--[2024-06-24 Mon 22:53] =>  0:13
    CLOCK: [2024-06-23 Sun 00:15]--[2024-06-23 Sun 00:19] =>  0:04
    :END:

We need to check for memory issues with nightlies.

Notes:

- error with valgrind appears to be related to DWARF version: [[https://github.com/llvm/llvm-project/issues/56550][#56550: Clang
  Generates DWARF Info That Valgrind Can't Read]]. Change it to v4.

*** COMPLETED Clean up toolchains and presets                         :story:
    :LOGBOOK:
    CLOCK: [2024-07-01 Mon 07:46]--[2024-07-01 Mon 08:17] =>  0:31
    CLOCK: [2024-06-30 Sun 23:03]--[2024-06-30 Sun 23:57] =>  0:54
    CLOCK: [2024-06-30 Sun 10:31]--[2024-06-30 Sun 10:37] =>  0:06
    CLOCK: [2024-06-30 Sun 10:09]--[2024-06-30 Sun 10:31] =>  0:22
   :END:

We are using CMake in a legacy way when defining warnings, etc. We need to move
towards the modern approach, by defining toolchain files and using presets
correctly.

*** COMPLETED Generate Doxygen documentation and add it to site       :story:
    :LOGBOOK:
    CLOCK: [2024-07-05 Fri 22:30]--[2024-07-05 Fri 22:48] =>  0:18
    CLOCK: [2024-07-05 Fri 20:45]--[2024-07-05 Fri 20:59] =>  0:14
    CLOCK: [2024-07-05 Fri 19:41]--[2024-07-05 Fri 20:00] =>  0:19
    :END:


*** COMPLETED Copy domain notes on core concepts                      :story:
    :LOGBOOK:
    CLOCK: [2024-07-06 Sat 08:47]--[2024-07-06 Sat 09:00] =>  0:13
    CLOCK: [2024-07-06 Sat 07:48]--[2024-07-06 Sat 08:20] =>  0:32
    CLOCK: [2024-07-04 Thu 23:12]--[2024-07-04 Thu 23:51] =>  0:39
    CLOCK: [2024-07-04 Thu 22:40]--[2024-07-04 Thu 22:55] =>  0:15
    CLOCK: [2024-07-04 Thu 08:44]--[2024-07-04 Thu 08:57] =>  0:13
    CLOCK: [2024-07-04 Thu 08:36]--[2024-07-04 Thu 08:43] =>  0:07
    CLOCK: [2024-07-03 Wed 22:30]--[2024-07-03 Wed 23:46] =>  1:16
    CLOCK: [2024-07-02 Tue 23:21]--[2024-07-03 Wed 00:14] =>  0:53
    CLOCK: [2024-07-02 Tue 22:35]--[2024-07-02 Tue 22:41] =>  0:06
    CLOCK: [2024-07-02 Tue 22:18]--[2024-07-02 Tue 22:34] =>  0:16
    :END:

Move assorted notes we have in the domain over to the documentation folder.

Notes:

- Fix issues with publishing by ignoring emacs package directories and vcpkg.
- add basic support for bibliography as per progen setup (manual bib file).

*** COMPLETED Valgrind fails to run unit tests                        :story:
    :LOGBOOK:
    CLOCK: [2024-07-06 Sat 07:36]--[2024-07-06 Sat 07:43] =>  0:07
    CLOCK: [2024-07-05 Fri 07:55]--[2024-07-05 Fri 08:07] =>  0:12
    CLOCK: [2024-07-04 Thu 22:56]--[2024-07-04 Thu 23:03] =>  0:07
    CLOCK: [2024-07-04 Thu 07:58]--[2024-07-04 Thu 08:27] =>  0:29
    CLOCK: [2024-07-03 Wed 23:48]--[2024-07-03 Wed 23:50] =>  0:02
    CLOCK: [2024-07-03 Wed 07:42]--[2024-07-03 Wed 07:57] =>  0:15
    :END:

At present we get the following failure:

#+begin_src
### unhandled dwarf2 abbrev form code 0x25
### unhandled dwarf2 abbrev form code 0x25
### unhandled dwarf2 abbrev form code 0x25
### unhandled dwarf2 abbrev form code 0x23
==6610== Valgrind: debuginfo reader: ensure_valid failed:
==6610== Valgrind:   during call to ML_(img_get)
==6610== Valgrind:   request for range [1940368405, +4) exceeds
==6610== Valgrind:   valid image size of 7099560 for image:
==6610== Valgrind:   "/home/runner/work/OreStudio/OreStudio/build/output/linux-clang-debug/projects/ores.ore.test/ores.ore.test"
==6610==
==6610== Valgrind: debuginfo reader: Possibly corrupted debuginfo file.
==6610== Valgrind: I can't recover.  Giving up.  Sorry.
==6610==
#+end_src

This normally means we are generating DWARF5:

- [[https://github.com/llvm/llvm-project/issues/56550][#56550: Clang Generates DWARF Info That Valgrind Can't Read]]

We still get the error with DWARF2 v4. Try v3. The problem is with valgrind:

- [[https://bugs.kde.org/show_bug.cgi?id=452758][Bug 452758: Valgrind does not read properly DWARF5 as generated by Clang14]]

We need to upgrade to latest valgrind. Try moving to latest ubuntu LTS which has
valgrind 3.22.

Updating to Ubunbtu 22.04 and valgrind 3.22 resolved the issue.

*** COMPLETED Initial sanity test generated packages                  :story:
    :LOGBOOK:
    CLOCK: [2024-07-06 Sat 08:21]--[2024-07-06 Sat 08:46] =>  0:25
    :END:

We need to do a simple check of the packages just to make sure they install and
run.

Linux package looks correct:

#+begin_src text
# dpkg -i orestudio_0.0.1_amd64.deb
Selecting previously unselected package orestudio.
(Reading database ... 872299 files and directories currently installed.)
Preparing to unpack orestudio_0.0.1_amd64.deb ...
Unpacking orestudio (0.0.1) ...
Setting up orestudio (0.0.1) ...
# ores.console --help
ORE Studio is a User Interface for Open Source Risk Engine (ORE).Console provides a CLI based version of the interface.
ORE Studio is created by the ORE Studio project.
ores.console uses a command-based interface: <command> <options>.
See below for a list of valid commands.

Global options:

General:
  -h [ --help ]           Display usage and exit.
  -v [ --version ]        Output version information and exit.

Logging:
  -e [ --log-enabled ]    Generate a log file.
  -l [ --log-level ] arg  What level to use for logging. Valid values: trace,
                          debug, info, warn, error. Defaults to info.
  --log-to-console        Output logging to the console, as well as to file.
  --log-directory arg     Where to place the log files.

Commands:

   data           Operates directly on data.

For command specific options, type <command> --help.
# ores.console --version
OreStudio v0.0.1
Copyright (C) 2024 Marco Craveiro.
License GPLv3: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
Build: Provider = 'github' Number = '73' Commit = 'a6ca706350b5063fe65b39484350f25bc6bfb806' Timestamp = '2024/07/05 23:59:06'
IMPORTANT: build details are NOT for security purposes.
# apt-get remove orestudio
#+end_src

GUI starts as expected.

Windows package looks very small:

#+begin_src text
$ ls -lh *msi
-rw-r--r-- 1 marco marco 448K Jul  6 00:01 OreStudio-0.0.1-win64.msi
#+end_src

Its also not installing under wine at present:

#+begin_src text
$ wine OreStudio-0.0.1-win64.msi
0024:err:module:import_dll Library zlib1.dll (which is needed by L"C:\\windows\\syswow64\\user32.dll") not found
0024:err:module:import_dll Library user32.dll (which is needed by L"C:\\windows\\syswow64\\gdi32.dll") not found
0024:err:module:import_dll Library gdi32.dll (which is needed by L"C:\\windows\\syswow64\\shell32.dll") not found
0024:err:module:import_dll Library zlib1.dll (which is needed by L"C:\\windows\\syswow64\\user32.dll") not found
0024:err:module:import_dll Library user32.dll (which is needed by L"C:\\windows\\syswow64\\gdi32.dll") not found
0024:err:module:import_dll Library gdi32.dll (which is needed by L"C:\\windows\\syswow64\\shlwapi.dll") not found
0024:err:module:import_dll Library zlib1.dll (which is needed by L"C:\\windows\\syswow64\\user32.dll") not found
0024:err:module:import_dll Library user32.dll (which is needed by L"C:\\windows\\syswow64\\shlwapi.dll") not found
0024:err:module:import_dll Library shlwapi.dll (which is needed by L"C:\\windows\\syswow64\\shell32.dll") not found
0024:err:module:import_dll Library zlib1.dll (which is needed by L"C:\\windows\\syswow64\\user32.dll") not found
0024:err:module:import_dll Library user32.dll (which is needed by L"C:\\windows\\syswow64\\shell32.dll") not found
0024:err:module:import_dll Library shell32.dll (which is needed by L"C:\\windows\\syswow64\\start.exe") not found
0024:err:module:import_dll Library zlib1.dll (which is needed by L"C:\\windows\\syswow64\\user32.dll") not found
0024:err:module:import_dll Library user32.dll (which is needed by L"C:\\windows\\syswow64\\start.exe") not found
0024:err:module:loader_init Importing dlls for L"C:\\windows\\syswow64\\start.exe" failed, status c0000135
#+end_src

This needs to be tested on a real windows box.

OSX package is not being uploaded:

#+begin_src text
Warning: No files were found with the provided path: ./build/output/macos-clang-release/packages/ORES-0.0.1-Darwin-x86_64.dmg. No artifacts will be uploaded.
#+end_src

This is because the filename is incorrect:

#+begin_src text
CPack: - package: /Users/runner/work/OreStudio/OreStudio/build/output/macos-clang-release/packages/OreStudio-0.0.1-Darwin.dmg generated.
#+end_src

*** STARTED Clang tests show up twice in nighlies                     :story:
    :LOGBOOK:
    CLOCK: [2024-07-06 Sat 07:44]--[2024-07-06 Sat 07:48] =>  0:04
    :END:

For some reason we see the dummy test coming out twice in the nightlies. We
checked CTest submission and it seems there is only one entry. This could be
some kind of timing bug in CDash.

*** STARTED Add command line options support                          :story:
    :LOGBOOK:
    CLOCK: [2024-07-06 Sat 00:49]--[2024-07-06 Sat 00:57] =>  0:08
    CLOCK: [2024-07-05 Fri 23:37]--[2024-07-06 Sat 00:48] =>  1:11
    CLOCK: [2024-07-05 Fri 08:08]--[2024-07-05 Fri 08:59] =>  0:51
    CLOCK: [2024-07-04 Thu 23:52]--[2024-07-05 Fri 00:04] =>  0:12
    CLOCK: [2024-06-29 Sat 23:33]--[2024-06-30 Sun 00:17] =>  0:44
    :END:

Add a simple command to command line options that deals with data, for example:

#+begin_src sh
ores.console data --import currencies.xml
#+end_src

Notes:

- missing version support. Need template, etc. Try to use existing CMake
  variables to setup the version.

*** STARTED Add XML parsing support for currency                      :story:
    :LOGBOOK:
    CLOCK: [2024-06-23 Sun 22:30]--[2024-06-23 Sun 22:34] =>  0:04
    CLOCK: [2024-06-23 Sun 18:45]--[2024-06-23 Sun 20:05] =>  1:20
    :END:

We need to have the ability to read and write currencies from XML. Copy all
currency input data from examples.

*** STARTED Create a containing structure for data                    :story:
   :LOGBOOK:
   CLOCK: [2024-06-27 Thu 23:22]--[2024-06-27 Thu 23:29] =>  0:07
   CLOCK: [2024-06-25 Tue 19:24]--[2024-06-25 Tue 19:33] =>  0:09
   CLOCK: [2024-06-25 Tue 19:12]--[2024-06-25 Tue 19:24] =>  0:12
   :END:

We need to be able to represent the data in the filesystem for the ORE samples
in a way that allows users to load and save the samples. The data in the
filesystem has the following structure:

- Examples
  - Example 1:
    - Input
    - ExpectedOutput, e.g. Output
  - Example 2
  - ...
  - Example n
  - Input

The overall context under which valuation is taking place needs a name. Options:

- environment
- workspace
- sandbox: seems to imply the data is not "real" but that is not always the
  case. This seems more like a label we could apply to the top-level container
  rather than its overall name.

Each entry within the top-level container is then itself another kind of
container. Options:

- namespace
- package

There are two types of these containers:

- libraries: components whose content is made to be shared with other
  components; and
- executables: components whose content is sufficient to execute computations.

- component

Elements within a component is of two kinds: input and output. However, this may
not necessarily be a good classification because some outputs can be used as
inputs to output other elements. Perhaps this is more of a tag.

Notes:

- move this analysis to documentation.

*** STARTED Add basic widgets to display currencies                   :story:
    :LOGBOOK:
    CLOCK: [2024-06-26 Wed 23:00]--[2024-06-26 Wed 23:26] =>  0:26
    :END:

We need some kind of tree view and list view.

*** STARTED Convert plantuml diagrams to org-babel                    :story:
    :LOGBOOK:
    CLOCK: [2024-07-01 Mon 23:04]--[2024-07-02 Tue 00:09] =>  1:05
    :END:

It may be easier to integrate diagrams with roam if they are org-mode documents.
Experiment with babel for this.

*** Install Windows package on Windows machine                        :story:

We need to install and run the windows package and make sure it works. Check
console and GUI start.

*** Install OSX package on OSX machine                                :story:

We need to install and run the windows package and make sure it works. Check
console and GUI start.

*** Add packaging support for images                                  :story:

At present we are not adding images to packages.

*** Create a staging directory                                        :story:

At present the binaries are scattered around the build directory. We should take
the same approach as Dogen and create clean directories for this.

*** Create an icon for the application                                :story:

We copied the Dogen icon to get us going. We should really grab our own logo.

*** Add JSON parsing support for currency                             :story:

We need to have the ability to read and write currencies from JSON.

*** Add postgres support for currency                                 :story:

We need to have the ability to read and write currencies from a postgres
database.

*** Work through all types required for Example 1                      :epic:

We want to be able to visualise all the data types needed in order to be able to
run the most basic example of ORE. For each of these types, create a stories.

The files are as follows. First, there are the files in the =Input= directory:

- [[https://github.com/OpenSourceRisk/Engine/tree/master/Examples/Example_1/Input][Example 1 Inputs]]

Specifically:

- =currencies.xml=
- =netting.xml=
- =ore.xml=
- =ore_swaption.xml=
- =plot.gp=
- =portfolio.xml=
- =portfolio_swap.xml=
- =portfolio_swap_20151023.xml=
- =portfolio_swaption.xml=
- =portfolio_swaption_20151023.xml=
- =simulation.xml=

In addition, we need all of the common inputs under:

- [[https://github.com/OpenSourceRisk/Engine/tree/master/Examples/Input][Examples - Common Inputs]]

These are:

- =calendaradjustment.xml=
- =conventions.xml=
- =currencies.xml=
- =curveconfig.xml=
- =fixings_20160205.txt=
- =market_20160205.txt=
- =market_20160205_flat.txt=
- =pricingengine.xml=
- =todaysmarket.xml=

Finally, we need support for the outputs. We can grab these from the expected
outputs:

- [[https://github.com/OpenSourceRisk/Engine/tree/master/Examples/Example_1/ExpectedOutput][Example 1 Expected Outputs]]

These are:

- =colva_nettingset_CPTY_A.csv=
- =curves.csv=
- =exposure_nettingset_CPTY_A.csv=
- =exposure_trade_Swap_20y.csv=
- =flows.csv=
- =log_progress.json=
- =netcube.csv=
- =npv.csv=
- =swaption_npv.csv=
- =xva.csv=
