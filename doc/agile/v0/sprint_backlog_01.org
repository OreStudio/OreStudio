:PROPERTIES:
:ID: 34EDDBB5-CB52-35C4-E123-E0A70FB32799
:END:
#+title: Sprint Backlog 01
#+options: date:nil toc:nil author:nil num:nil
#+todo: STARTED | COMPLETED CANCELLED POSTPONED
#+tags: { story(s) epic(e) spike(p) }

* Sprint Goals

- Create basic project infrastructure.

* Stories

** Active

#+begin: clocktable :maxlevel 3 :scope subtree :indent nil :emphasize nil :scope file :narrow 75 :formula %
#+CAPTION: Clock summary at [2024-06-23 Sun 16:09]
| <75>                                    |         |       |      |       |
| Headline                                | Time    |       |      |     % |
|-----------------------------------------+---------+-------+------+-------|
| *Total time*                            | *12:43* |       |      | 100.0 |
|-----------------------------------------+---------+-------+------+-------|
| Stories                                 | 12:43   |       |      | 100.0 |
| Active                                  |         | 12:43 |      | 100.0 |
| Sprint and product backlog refinement   |         |       | 0:22 |   2.9 |
| Create a basic git hub repository       |         |       | 0:35 |   4.6 |
| Setup a discord channel for the project |         |       | 0:14 |   1.8 |
| Setup vcpkg and cmake                   |         |       | 1:21 |  10.6 |
| Setup github actions                    |         |       | 1:21 |  10.6 |
| Create and upload a package             |         |       | 3:28 |  27.3 |
| Create a basic project structure        |         |       | 2:10 |  17.0 |
| Add a Qt hello world                    |         |       | 3:08 |  24.6 |
| Add nightly support with memcheck       |         |       | 0:04 |   0.5 |
#+end:

Agenda:

#+begin_src emacs-lisp
(org-agenda-file-to-front)
#+end_src

*** STARTED Sprint and product backlog refinement                     :story:
    :LOGBOOK:
    CLOCK: [2024-06-23 Sun 16:00]--[2024-06-23 Sun 16:08] =>  0:08
    CLOCK: [2024-06-22 Sat 23:14]--[2024-06-22 Sat 23:20] =>  0:06
    CLOCK: [2024-06-22 Sat 23:10]--[2024-06-22 Sat 23:13] =>  0:03
    CLOCK: [2024-06-15 Sat 21:16]--[2024-06-15 Sat 21:21] =>  0:05
    :END:

Updates to sprint and product backlog.

*** COMPLETED Create a basic git hub repository                       :story:
    :LOGBOOK:
    CLOCK: [2024-06-15 Sat 21:03]--[2024-06-15 Sat 21:15] =>  0:18
    CLOCK: [2024-06-15 Sat 20:40]--[2024-06-15 Sat 21:03] =>  0:23
    :END:

- add a new organisation and repo.
- add a simple project with vcpkg support.

*** COMPLETED Setup a discord channel for the project                 :story:
    :LOGBOOK:
    CLOCK: [2024-06-22 Sat 14:28]--[2024-06-22 Sat 14:42] =>  0:14
    :END:

Created VisualOre and setup emacs to connect to it.

Links:

- [[https://github.com/sm00th/bitlbee-discord][bitlbee-discord]]
- [[https://www.emacswiki.org/emacs/BitlBee][emacs wiki BitlBee]]
- [[https://aliquote.org/post/discord-bitlbee/][Discord on Emacs]]

*** COMPLETED Setup vcpkg and cmake                                   :story:
    :LOGBOOK:
    CLOCK: [2024-06-22 Sat 15:51]--[2024-06-22 Sat 16:30] =>  0:39
    CLOCK: [2024-06-22 Sat 15:15]--[2024-06-22 Sat 15:26] =>  0:11
    CLOCK: [2024-06-22 Sat 14:43]--[2024-06-22 Sat 15:14] =>  0:31
   :END:

Setup a basic build with vcpkg.

*** COMPLETED Setup github actions                                    :story:
    :LOGBOOK:
    CLOCK: [2024-06-22 Sat 18:50]--[2024-06-22 Sat 19:27] =>  0:37
    CLOCK: [2024-06-22 Sat 17:45]--[2024-06-22 Sat 18:09] =>  0:24
    CLOCK: [2024-06-22 Sat 16:30]--[2024-06-22 Sat 16:50] =>  0:20
    :END:

Get a basic green build in github, showing up in CDash.

*** COMPLETED Create and upload a package                             :story:
    :LOGBOOK:
    CLOCK: [2024-06-22 Sat 22:45]--[2024-06-22 Sat 23:09] =>  0:24
    CLOCK: [2024-06-22 Sat 21:41]--[2024-06-22 Sat 22:44] =>  1:03
    CLOCK: [2024-06-22 Sat 19:28]--[2024-06-22 Sat 21:29] =>  2:01
    :END:

We should create a basic package, and upload it to github.

*** COMPLETED Create a basic project structure                        :story:
    :LOGBOOK:
    CLOCK: [2024-06-22 Sat 13:57]--[2024-06-22 Sat 14:10] =>  0:13
    CLOCK: [2024-06-22 Sat 12:00]--[2024-06-22 Sat 13:57] =>  1:57
    :END:

We need to decide on the basic architecture for the project. As this is a
side-project, mainly for learning about ORE, it is going to be very simple: one
or more fat clients connecting to a postgres database. We don't mind having
business logic in the database; the most important thing is for it to be really
quick to add new features with the least amount of layers and duplication.

*** COMPLETED Add a Qt hello world                                    :story:
    :LOGBOOK:
    CLOCK: [2024-06-23 Sun 15:02]--[2024-06-23 Sun 15:15] =>  0:13
    CLOCK: [2024-06-23 Sun 10:19]--[2024-06-23 Sun 10:29] =>  0:10
    CLOCK: [2024-06-23 Sun 10:08]--[2024-06-23 Sun 10:18] =>  0:10
    CLOCK: [2024-06-23 Sun 09:50]--[2024-06-23 Sun 10:07] =>  0:17
    CLOCK: [2024-06-23 Sun 08:17]--[2024-06-23 Sun 09:49] =>  1:32
    CLOCK: [2024-06-23 Sun 00:20]--[2024-06-23 Sun 00:45] =>  0:25
    CLOCK: [2024-06-22 Sat 23:53]--[2024-06-23 Sun 00:14] =>  0:21
    :END:

Create a trivial application in Qt that exercises the pipelines.

*** COMPLETED Add a splash screen to applciation                      :story:
    :LOGBOOK:
    CLOCK: [2024-06-23 Sun 16:09]--[2024-06-23 Sun 16:50] =>  0:41
    :END:

It would be nice to have a simple splash screen with the project logo.

#+begin_quote c++
#include "mainwindow.h"
#include <QApplication>
#include <QSplashScreen>
#include <QTimer>

int main(int argc, char *argv[])
{
    QApplication a(argc, argv);

    QSplashScreen *splash = new QSplashScreen;
    splash->setPixmap(QPixmap("C:/Users/9589693153/Desktop/Vids/pk.png"));
    splash->show();

    MainWindow w;

    QTimer::singleShot(5000, splash, SLOT(close()));
    QTimer::singleShot(5000, &w, SLOT(show()));

    // w.show();

    return a.exec();
}
#+end_quote

*** STARTED Add nightly support with memcheck                         :story:
    :LOGBOOK:
    CLOCK: [2024-06-23 Sun 00:15]--[2024-06-23 Sun 00:19] =>  0:04
    :END:

We need to check for memory issues with nightlies.

*** Create a staging directory                                        :story:

At present the binaries are scattered around the build directory. We should take
the same approach as Dogen and create clean directories for this.

*** Create an icon for the application                                :story:

We copied the Dogen icon to get us going. We should really grab our own logo.

*** Add XML parsing support for currency                              :story:

We need to have the ability to read and write currencies from XML. Copy all
currency input data from examples.

*** Exclude vcpkg directories from coverage                           :story:

At present coverage is very low because its picking up some files from vcpkg
install. We need to ignore those.

*** Add JSON parsing support for currency                             :story:

We need to have the ability to read and write currencies from JSON.

*** Add postgres support for currency                                 :story:

We need to have the ability to read and write currencies from a postgres
database.

*** Work through all types required for Example 1                      :epic:

We want to be able to visualise all the data types needed in order to be able to
run the most basic example of ORE. For each of these types, create a stories.

The files are as follows. First, there are the files in the =Input= directory:

- [[https://github.com/OpenSourceRisk/Engine/tree/master/Examples/Example_1/Input][Example_1 Inputs]]

Specifically:

- =currencies.xml=
- =netting.xml=
- =ore.xml=
- =ore_swaption.xml=
- =plot.gp=
- =portfolio.xml=
- =portfolio_swap.xml=
- =portfolio_swap_20151023.xml=
- =portfolio_swaption.xml=
- =portfolio_swaption_20151023.xml=
- =simulation.xml=

In addition, we need all of the common inputs under:

- [[https://github.com/OpenSourceRisk/Engine/tree/master/Examples/Input][Examples - Common Inputs]]

These are:

- =calendaradjustment.xml=
- =conventions.xml=
- =currencies.xml=
- =curveconfig.xml=
- =fixings_20160205.txt=
- =market_20160205.txt=
- =market_20160205_flat.txt=
- =pricingengine.xml=
- =todaysmarket.xml=

Finally, we need support for the outputs. We can grab these from the expected
outputs:

- [[https://github.com/OpenSourceRisk/Engine/tree/master/Examples/Example_1/ExpectedOutput][Example_1 Expected Outputs]]

These are:

- =colva_nettingset_CPTY_A.csv=
- =curves.csv=
- =exposure_nettingset_CPTY_A.csv=
- =exposure_trade_Swap_20y.csv=
- =flows.csv=
- =log_progress.json=
- =netcube.csv=
- =npv.csv=
- =swaption_npv.csv=
- =xva.csv=

*** Base the compute approach on BOINC                                :story:

Copy the BOINC data model.

Links:

- [[https://boinc.berkeley.edu/trac/wiki/DataBase][wiki: DataBase]]
- [[https://wiki.debian.org/BOINC/ServerGuide][BOINC Debian Server Guide]]
- [[https://boinc.berkeley.edu/trac/wiki/ProjectMain][wiki: BOINC Project Main]]
- [[https://www.reddit.com/r/BOINC/][BOINC reddit]]


*** Create a set of fake currencies                                   :story:

We need to create fake data so we can explore the problem domain. This is
something to work on in the future. We can use LLMs to help with the fake data,
where it makes sense.

Example:

| Country code | Country name | Currency Code | Currency Number | Currency           |
|--------------+--------------+---------------+-----------------+--------------------|
| AL           | Aerilon      | ALD           |           10001 | Aerilonian Dollar  |
| AR           | Arcturia     | ARA           |           10002 | Arcturian Arct     |
| BA           | Balthoria    | BAF           |           10003 | Balthorian Florin  |
| BE           | Belloria     | BEB           |           10004 | Bellorian Bell     |
| CA           | Calandria    | CAC           |           10005 | Calandrian Crown   |
| CD           | Caledonia    | CDC           |           10006 | Caledonian Caled   |
| DA           | Daeloria     | DAD           |           10007 | Daelorian Dinar    |
| DE           | Delvadia     | DED           |           10008 | Delvadian Delv     |
| ER           | Eriador      | ERE           |           10009 | Eriadoran Euro     |
| ES           | Esteria      | ESE           |           10010 | Esterian Est       |
| FE           | Feloria      | FEF           |           10011 | Felorian Franc     |
| FN           | Fendaria     | FNF           |           10012 | Fendarian Fen      |
| GA           | Galdoria     | GAG           |           10013 | Galdorian Galleon  |
| GR           | Grendoria    | GRG           |           10014 | Grendorian Grend   |
| HE           | Helvetia     | HEF           |           10015 | Helvetian Franc    |
| HY           | Hydronia     | HYH           |           10016 | Hydronian Hyd      |
| IR           | Iridia       | IRD           |           10017 | Iridian Dollar     |
| IT           | Ithaca       | ITI           |           10018 | Ithacan Ith        |
| JE           | Jethro       | JEJ           |           10019 | Jethronian Jet     |
| JO           | Jorvik       | JOK           |           10020 | Jorvikian Krona    |
| KA           | Kaelor       | KAK           |           10021 | Kaelorian Krown    |
| KR           | Krynn        | KRK           |           10022 | Krynnish Krynn     |
| LU           | Luminia      | LUL           |           10023 | Luminian Lum       |
| LY           | Lysandria    | LYL           |           10024 | Lysandrian Lira    |
| MA           | Maldoria     | MAM           |           10025 | Maldorian Mal      |
| MR           | Mariposa     | MRP           |           10026 | Mariposan Peso     |
| NE           | Nektonia     | NEN           |           10027 | Nektonian Nek      |
| NT           | Netharia     | NTN           |           10028 | Netharian Naira    |
| OR           | Orinoco      | ORB           |           10029 | Orinocan Bolivar   |
| OL           | Orlanthia    | OLO           |           10030 | Orlanthian Orl     |
| PA           | Paldoria     | PAP           |           10031 | Paldorian Peso     |
| PY           | Pyrrhia      | PYP           |           10032 | Pyrrhian Pyr       |
| QU           | Quentaria    | QUQ           |           10033 | Quentarian Quen    |
| QN           | Quinaria     | QNQ           |           10034 | Quinarian Quetzal  |
| RE           | Rendellia    | RER           |           10035 | Rendellian Rend    |
| RI           | Rivenia      | RIR           |           10036 | Rivenian Ruble     |
| SE           | Serendia     | SES           |           10037 | Serendian Shilling |
| SI           | Sildoria     | SIS           |           10038 | Sildorian Sild     |
| TA           | Tandor       | TAT           |           10039 | Tandorian Taka     |
| TE           | Tenebria     | TET           |           10040 | Tenebrian Ten      |
| UL           | Uldoria      | ULU           |           10041 | Uldorian Uld       |
| UT           | Utopia       | UTU           |           10042 | Utopian Unit       |
| VA           | Valoria      | VAV           |           10042 | Valorian Valt      |
| VL           | Valtaria     | VLV           |           10043 | Valtarian Val      |
| WI           | Wintervale   | WIW           |           10044 | Wintervalean Won   |
| WY           | Wysteria     | WYW           |           10045 | Wysterian Wys      |
| XA           | Xandria      | XAX           |           10046 | Xandrian Xan       |
| XE           | Xenoria      | XEX           |           10047 | Xenorian Xen       |
| YS           | Yslandia     | YSY           |           10048 | Yslandian Yen      |
| ZE           | Zephyria     | ZEZ           |           10049 | Zephyrian Zephyr   |
