:PROPERTIES:
:ID: 34EDDBB5-CB52-35C4-E123-E0A70FB32799
:END:
#+title: Sprint Backlog 01
#+options: <:nil c:nil ^:nil d:nil date:nil author:nil toc:nil html-postamble:nil
#+todo: STARTED | COMPLETED CANCELLED POSTPONED BLOCKED
#+tags: { code(c) infra(i) doc(d) agile(a) }
#+startup: inlineimages

* Sprint Mission

- Create basic project infrastructure.
- Handle currencies front to back.

* Stories

** Active

#+begin: clocktable :maxlevel 3 :scope subtree :tags t :indent nil :emphasize nil :scope file :narrow 75 :formula %
#+TBLNAME: sprint_summary
#+CAPTION: Clock summary at [2024-07-13 Sat 00:16]
|       | <75>                                              |         |       |      |       |
| Tags  | Headline                                          | Time    |       |      |     % |
|-------+---------------------------------------------------+---------+-------+------+-------|
|       | *Total time*                                      | *63:02* |       |      | 100.0 |
|-------+---------------------------------------------------+---------+-------+------+-------|
|       | Stories                                           | 63:02   |       |      | 100.0 |
|       | Active                                            |         | 63:02 |      | 100.0 |
| agile | Sprint and product backlog refinement             |         |       | 2:53 |   4.6 |
| infra | Create a basic git hub repository                 |         |       | 0:35 |   0.9 |
| infra | Setup a discord channel for the project           |         |       | 0:14 |   0.4 |
| infra | Setup vcpkg and cmake                             |         |       | 1:21 |   2.1 |
| infra | Setup github actions                              |         |       | 1:21 |   2.1 |
| infra | Create and upload a package                       |         |       | 3:28 |   5.5 |
| code  | Create a basic project structure                  |         |       | 2:10 |   3.4 |
| code  | Add a Qt hello world                              |         |       | 3:08 |   5.0 |
| code  | Add a splash screen to applciation                |         |       | 0:41 |   1.1 |
| infra | Add basic site                                    |         |       | 0:34 |   0.9 |
| code  | Add modeling infrastructure                       |         |       | 1:30 |   2.4 |
| infra | Fix code syntax highlighting in site              |         |       | 0:10 |   0.3 |
| doc   | Merge index with readme                           |         |       | 0:42 |   1.1 |
| doc   | Add project objective to readme                   |         |       | 2:24 |   3.8 |
| code  | Add basic logging support                         |         |       | 1:14 |   2.0 |
| infra | Add nightly support with memcheck                 |         |       | 3:21 |   5.3 |
| code  | Clean up toolchains and presets                   |         |       | 1:53 |   3.0 |
| doc   | Generate Doxygen documentation and add it to site |         |       | 0:51 |   1.3 |
| doc   | Copy domain notes on core concepts                |         |       | 4:41 |   7.4 |
| infra | Valgrind fails to run unit tests                  |         |       | 1:12 |   1.9 |
| infra | Initial sanity test generated packages            |         |       | 0:25 |   0.7 |
| code  | Add command line options support                  |         |       | 5:45 |   9.1 |
| infra | Unit tests show up twice in nightlies             |         |       | 0:13 |   0.3 |
| doc   | Add recipes for command line                      |         |       | 0:51 |   1.3 |
| agile | Use a bar chart for sprint resourcing cost        |         |       | 2:57 |   4.7 |
| agile | Classify stories by type                          |         |       | 0:34 |   0.9 |
| code  | Update C++ standard                               |         |       | 0:29 |   0.8 |
| infra | Setup laptop for development                      |         |       | 3:47 |   6.0 |
| infra | Add database support for currency                 |         |       | 1:19 |   2.1 |
| code  | Add XML parsing support for currency              |         |       | 6:32 |  10.4 |
| code  | Add JSON support for currency                     |         |       | 2:03 |   3.3 |
| code  | Add basic widgets to display currencies           |         |       | 1:50 |   2.9 |
| infra | Ignore vcpkg warnings                             |         |       | 0:21 |   0.6 |
| code  | Create a containing structure for data            |         |       | 0:28 |   0.7 |
| doc   | Convert plantuml diagrams to org-babel            |         |       | 1:05 |   1.7 |
#+end:

*** STARTED Sprint and product backlog refinement                    :agile:
    :LOGBOOK:
    CLOCK: [2024-07-09 Tue 18:48]--[2024-07-09 Tue 18:52] =>  0:04
    CLOCK: [2024-07-09 Tue 08:38]--[2024-07-09 Tue 08:43] =>  0:05
    CLOCK: [2024-07-09 Tue 08:24]--[2024-07-09 Tue 08:35] =>  0:11
    CLOCK: [2024-07-08 Mon 22:30]--[2024-07-08 Mon 22:55] =>  0:25
    CLOCK: [2024-07-08 Mon 08:30]--[2024-07-08 Mon 08:59] =>  0:29
    CLOCK: [2024-07-08 Mon 08:10]--[2024-07-08 Mon 08:20] =>  0:10
    CLOCK: [2024-07-07 Sun 17:54]--[2024-07-07 Sun 18:05] =>  0:11
    CLOCK: [2024-07-05 Fri 23:13]--[2024-07-05 Fri 23:26] =>  0:13
    CLOCK: [2024-07-02 Tue 07:40]--[2024-07-02 Tue 07:50] =>  0:10
    CLOCK: [2024-06-29 Sat 00:46]--[2024-06-29 Sat 00:54] =>  0:08
    CLOCK: [2024-06-26 Wed 23:27]--[2024-06-26 Wed 23:43] =>  0:16
    CLOCK: [2024-06-25 Tue 19:06]--[2024-06-25 Tue 19:11] =>  0:05
    CLOCK: [2024-06-23 Sun 16:50]--[2024-06-23 Sun 16:54] =>  0:04
    CLOCK: [2024-06-23 Sun 16:00]--[2024-06-23 Sun 16:08] =>  0:08
    CLOCK: [2024-06-22 Sat 23:14]--[2024-06-22 Sat 23:20] =>  0:06
    CLOCK: [2024-06-22 Sat 23:10]--[2024-06-22 Sat 23:13] =>  0:03
    CLOCK: [2024-06-15 Sat 21:16]--[2024-06-15 Sat 21:21] =>  0:05
    :END:

Updates to sprint and product backlog.

#+begin_src emacs-lisp :exports none
;; agenda
(org-agenda-file-to-front)
#+end_src

#+name: stories-chart
#+begin_src R :var sprint_summary=sprint_summary :results file graphics :exports results :file sprint_backlog_01_stories.png :width 1200 :height 650
library(conflicted)
library(grid)
library(tidyverse)
library(tibble)

# Remove unnecessary rows.
clean_sprint_summary <- tail(sprint_summary, -4)
names <- unlist(clean_sprint_summary[2])
values <- as.numeric(unlist(clean_sprint_summary[6]))

# Create a data frame.
df <- data.frame(
  cost = values,
  stories = factor(names, levels = names[order(values, decreasing = FALSE)]),
  y = seq(length(names)) * 0.9
)

# Setup the colors
blue <- "#076fa2"

p <- ggplot(df) +
  aes(x = cost, y = stories) +
  geom_col(fill = blue, width = 0.6) +
  ggtitle("Sprint 1: Resourcing per Story") +
  xlab("Resourcing (%)") + ylab("Stories") +
  theme(text = element_text(size = 15))

print(p)
#+end_src

#+RESULTS: stories-chart
[[file:sprint_backlog_01_stories.png]]

#+name: tags-chart
#+begin_src R :var sprint_summary=sprint_summary :results file graphics :exports results :file sprint_backlog_01_tags.png :width 600 :height 400
library(conflicted)
library(grid)
library(tidyverse)
library(tibble)

# Remove unnecessary rows.
clean_sprint_summary <- tail(sprint_summary, -4)
names <- unlist(clean_sprint_summary[1])
values <- as.numeric(unlist(clean_sprint_summary[6]))

# Create a data frame.
df <- data.frame(
  cost = values,
  tags = names,
  y = seq(length(names)) * 0.9
)
# factor(names, levels = names[order(values, decreasing = FALSE)])

df2 <- setNames(aggregate(df$cost, by = list(df$tags), FUN = sum),  c("cost", "tags"))
# Setup the colors
blue <- "#076fa2"

p <- ggplot(df2) +
  aes(x = cost, y = tags) +
  geom_col(fill = blue, width = 0.6) +
  ggtitle("Sprint 1: Resourcing per Tag") +
  xlab("Resourcing (%)") + ylab("Story types") +
  theme(text = element_text(size = 15))

print(p)
#+end_src

#+RESULTS: tags-chart
[[file:sprint_backlog_01_tags.png]]

*** COMPLETED Create a basic git hub repository                       :infra:
    :LOGBOOK:
    CLOCK: [2024-06-15 Sat 21:03]--[2024-06-15 Sat 21:15] =>  0:18
    CLOCK: [2024-06-15 Sat 20:40]--[2024-06-15 Sat 21:03] =>  0:23
    :END:

- add a new organisation and repo.
- add a simple project with vcpkg support.

Result:

- Git repository: [[https://github.com/OreStudio/OreStudio/]]

*** COMPLETED Setup a discord channel for the project                 :infra:
    :LOGBOOK:
    CLOCK: [2024-06-22 Sat 14:28]--[2024-06-22 Sat 14:42] =>  0:14
    :END:

Created VisualOre and setup emacs to connect to it.

Result:

- Discord channel: https://discord.gg/gcrYsjW3pd

Links:

- [[https://github.com/sm00th/bitlbee-discord][bitlbee-discord]]
- [[https://www.emacswiki.org/emacs/BitlBee][emacs wiki BitlBee]]
- [[https://aliquote.org/post/discord-bitlbee/][Discord on Emacs]]

*** COMPLETED Setup vcpkg and cmake                                   :infra:
    :LOGBOOK:
    CLOCK: [2024-06-22 Sat 15:51]--[2024-06-22 Sat 16:30] =>  0:39
    CLOCK: [2024-06-22 Sat 15:15]--[2024-06-22 Sat 15:26] =>  0:11
    CLOCK: [2024-06-22 Sat 14:43]--[2024-06-22 Sat 15:14] =>  0:31
   :END:

Setup a basic build with vcpkg.

Result:

- vcpkg in git repository: [[https://github.com/OreStudio/OreStudio/]]

*** COMPLETED Setup github actions                                    :infra:
    :LOGBOOK:
    CLOCK: [2024-06-22 Sat 18:50]--[2024-06-22 Sat 19:27] =>  0:37
    CLOCK: [2024-06-22 Sat 17:45]--[2024-06-22 Sat 18:09] =>  0:24
    CLOCK: [2024-06-22 Sat 16:30]--[2024-06-22 Sat 16:50] =>  0:20
    :END:

Get a basic green build in github, showing up in CDash.

Result:

- Workflow definitions: https://github.com/OreStudio/OreStudio/tree/main/.github/workflows
- Pipelines: https://github.com/OreStudio/OreStudio/actions

*** COMPLETED Create and upload a package                             :infra:
    :LOGBOOK:
    CLOCK: [2024-06-22 Sat 22:45]--[2024-06-22 Sat 23:09] =>  0:24
    CLOCK: [2024-06-22 Sat 21:41]--[2024-06-22 Sat 22:44] =>  1:03
    CLOCK: [2024-06-22 Sat 19:28]--[2024-06-22 Sat 21:29] =>  2:01
    :END:

We should create a basic package, and upload it to github.

Result:

- Packages available in action:
  https://github.com/OreStudio/OreStudio/actions/runs/9830998231

*** COMPLETED Create a basic project structure                         :code:
    :LOGBOOK:
    CLOCK: [2024-06-22 Sat 13:57]--[2024-06-22 Sat 14:10] =>  0:13
    CLOCK: [2024-06-22 Sat 12:00]--[2024-06-22 Sat 13:57] =>  1:57
    :END:

We need to decide on the basic architecture for the project. As this is a
side-project, mainly for learning about ORE, it is going to be very simple: one
or more fat clients connecting to a postgres database. We don't mind having
business logic in the database; the most important thing is for it to be really
quick to add new features with the least amount of layers and duplication.

Result:

- Structure in github: https://github.com/OreStudio/OreStudio/

*** COMPLETED Add a Qt hello world                                     :code:
    :LOGBOOK:
    CLOCK: [2024-06-23 Sun 15:02]--[2024-06-23 Sun 15:15] =>  0:13
    CLOCK: [2024-06-23 Sun 10:19]--[2024-06-23 Sun 10:29] =>  0:10
    CLOCK: [2024-06-23 Sun 10:08]--[2024-06-23 Sun 10:18] =>  0:10
    CLOCK: [2024-06-23 Sun 09:50]--[2024-06-23 Sun 10:07] =>  0:17
    CLOCK: [2024-06-23 Sun 08:17]--[2024-06-23 Sun 09:49] =>  1:32
    CLOCK: [2024-06-23 Sun 00:20]--[2024-06-23 Sun 00:45] =>  0:25
    CLOCK: [2024-06-22 Sat 23:53]--[2024-06-23 Sun 00:14] =>  0:21
    :END:

Create a trivial application in Qt that exercises the pipelines.

Result:

- Qt project: https://github.com/OreStudio/OreStudio/tree/main/projects/ores.qt

*** COMPLETED Add a splash screen to applciation                       :code:
    :LOGBOOK:
    CLOCK: [2024-06-23 Sun 16:09]--[2024-06-23 Sun 16:50] =>  0:41
    :END:

It would be nice to have a simple splash screen with the project logo.

Example:

#+begin_src c++
#include "mainwindow.h"
#include <QApplication>
#include <QSplashScreen>
#include <QTimer>

int main(int argc, char *argv[])
{
    QApplication a(argc, argv);

    QSplashScreen *splash = new QSplashScreen;
    splash->setPixmap(QPixmap("C:/Users/9589693153/Desktop/Vids/pk.png"));
    splash->show();

    MainWindow w;

    QTimer::singleShot(5000, splash, SLOT(close()));
    QTimer::singleShot(5000, &w, SLOT(show()));

    // w.show();

    return a.exec();
}
#+end_src

Source: [[https://www.youtube.com/watch?v=1i0k3rjXu9E][QT C++ GUI Tutorial - How to display a Splash Screen in Qt]]

Result:

- Code: [[https://github.com/OreStudio/OreStudio/blob/1594a8e5726b055fbf1793380ba773f8b7c75017/projects/ores.qt/main.cpp][QT main.cpp]]

*** COMPLETED Add basic site                                          :infra:
    :LOGBOOK:
    CLOCK: [2024-06-28 Fri 22:50]--[2024-06-28 Fri 23:13] =>  0:23
    CLOCK: [2024-06-28 Fri 08:05]--[2024-06-28 Fri 08:16] =>  0:11
    :END:

We need a basic website for the project.

Result:

- site: https://orestudio.github.io/OreStudio/

*** COMPLETED Add modeling infrastructure                              :code:
   :LOGBOOK:
   CLOCK: [2024-06-29 Sat 00:34]--[2024-06-29 Sat 00:45] =>  0:11
   CLOCK: [2024-06-28 Fri 23:14]--[2024-06-29 Sat 00:33] =>  1:19
   :END:

We need to be able to draw some simple PlantUML diagrams to describe the code as
we go along. They should be linked to the documentation.

Result:

- [[https://github.com/OreStudio/OreStudio/tree/2a7b9fa8c021f08252b0951f193cec8dbd52ddff/doc/modeling][Modeling folder]]

*** COMPLETED Exclude vcpkg directories from coverage                 :infra:

At present coverage is very low because its picking up some files from vcpkg
install. We need to ignore those.

Result:

- [[https://github.com/OreStudio/OreStudio/blob/2a7b9fa8c021f08252b0951f193cec8dbd52ddff/CTestCustom.cmake][CTestCustom.cmake]]

*** COMPLETED Fix code syntax highlighting in site                    :infra:
    :LOGBOOK:
    CLOCK: [2024-06-29 Sat 17:30]--[2024-06-29 Sat 17:40] =>  0:10
    :END:

For some reason we are not getting syntax highlighting in the website.

Result:

- The issue was with the markers on source code blocks.

*** COMPLETED Merge index with readme                                   :doc:
    :LOGBOOK:
    CLOCK: [2024-06-29 Sat 18:15]--[2024-06-29 Sat 18:33] =>  0:18
    CLOCK: [2024-06-29 Sat 17:50]--[2024-06-29 Sat 18:14] =>  0:24
    :END:

Its a bit annoying to have both a =readme= and an =index= file, since they are
both just landing pages. Look into merging them.

Result:

- [[https://github.com/OreStudio/OreStudio/blob/2a7b9fa8c021f08252b0951f193cec8dbd52ddff/readme.org][readme.org]]

*** COMPLETED Add project objective to readme                           :doc:
    :LOGBOOK:
    CLOCK: [2024-07-04 Thu 08:29]--[2024-07-04 Thu 08:36] =>  0:07
    CLOCK: [2024-06-29 Sat 22:55]--[2024-06-29 Sat 23:28] =>  0:33
    CLOCK: [2024-06-29 Sat 20:50]--[2024-06-29 Sat 20:55] =>  0:05
    CLOCK: [2024-06-29 Sat 19:05]--[2024-06-29 Sat 20:44] =>  1:39
    :END:

Explain the objective of the project and the approach.

Result:

- [[https://github.com/OreStudio/OreStudio/blob/2a7b9fa8c021f08252b0951f193cec8dbd52ddff/readme.org][readme.org]]: section "Project Overview".

*** COMPLETED Add basic logging support                                :code:
   :LOGBOOK:
   CLOCK: [2024-06-28 Fri 22:02]--[2024-06-28 Fri 22:32] =>  0:30
   CLOCK: [2024-06-28 Fri 00:00]--[2024-06-28 Fri 00:44] =>  0:44
   :END:

Copy across from dogen basic logging.

Result:

- [[https://github.com/OreStudio/OreStudio/tree/2a7b9fa8c021f08252b0951f193cec8dbd52ddff/projects/ores.utility/log][log folder]]

*** COMPLETED Add nightly support with memcheck                       :infra:
    :LOGBOOK:
    CLOCK: [2024-07-02 Tue 21:48]--[2024-07-02 Tue 21:58] =>  0:10
    CLOCK: [2024-07-02 Tue 07:50]--[2024-07-02 Tue 08:18] =>  0:28
    CLOCK: [2024-06-30 Sun 09:32]--[2024-06-30 Sun 09:50] =>  0:18
    CLOCK: [2024-06-29 Sat 14:00]--[2024-06-29 Sat 14:12] =>  0:12
    CLOCK: [2024-06-29 Sat 08:42]--[2024-06-29 Sat 09:15] =>  0:33
    CLOCK: [2024-06-28 Fri 07:45]--[2024-06-28 Fri 08:04] =>  0:19
    CLOCK: [2024-06-27 Thu 23:00]--[2024-06-27 Thu 23:21] =>  0:21
    CLOCK: [2024-06-27 Thu 22:40]--[2024-06-27 Thu 22:59] =>  0:19
    CLOCK: [2024-06-26 Wed 19:30]--[2024-06-26 Wed 19:44] =>  0:14
    CLOCK: [2024-06-25 Tue 18:22]--[2024-06-25 Tue 18:32] =>  0:10
    CLOCK: [2024-06-24 Mon 22:40]--[2024-06-24 Mon 22:53] =>  0:13
    CLOCK: [2024-06-23 Sun 00:15]--[2024-06-23 Sun 00:19] =>  0:04
    :END:

We need to check for memory issues with nightlies.

Notes:

- error with valgrind appears to be related to DWARF version: [[https://github.com/llvm/llvm-project/issues/56550][#56550: Clang
  Generates DWARF Info That Valgrind Can't Read]]. Change it to v4.

Result:

- [[https://github.com/OreStudio/OreStudio/blob/2a7b9fa8c021f08252b0951f193cec8dbd52ddff/.github/workflows/nightly-linux.yml][Nightly workflow]].
- [[https://my.cdash.org/index.php?project=OreStudio][Nightly in CDash]].

*** COMPLETED Clean up toolchains and presets                          :code:
    :LOGBOOK:
    CLOCK: [2024-07-01 Mon 07:46]--[2024-07-01 Mon 08:17] =>  0:31
    CLOCK: [2024-06-30 Sun 23:03]--[2024-06-30 Sun 23:57] =>  0:54
    CLOCK: [2024-06-30 Sun 10:31]--[2024-06-30 Sun 10:37] =>  0:06
    CLOCK: [2024-06-30 Sun 10:09]--[2024-06-30 Sun 10:31] =>  0:22
   :END:

We are using CMake in a legacy way when defining warnings, etc. We need to move
towards the modern approach, by defining toolchain files and using presets
correctly.

Result:

- [[https://github.com/OreStudio/OreStudio/blob/2a7b9fa8c021f08252b0951f193cec8dbd52ddff/CMakePresets.json][presets file]], with workflow.

*** COMPLETED Generate Doxygen documentation and add it to site         :doc:
    :LOGBOOK:
    CLOCK: [2024-07-05 Fri 22:30]--[2024-07-05 Fri 22:48] =>  0:18
    CLOCK: [2024-07-05 Fri 20:45]--[2024-07-05 Fri 20:59] =>  0:14
    CLOCK: [2024-07-05 Fri 19:41]--[2024-07-05 Fri 20:00] =>  0:19
    :END:

We need to create the project documentation in Doxygen.

Result:

- [[https://orestudio.github.io/OreStudio/doxygen/html/index.html][Doxygen documentation]].

*** COMPLETED Copy domain notes on core concepts                        :doc:
    :LOGBOOK:
    CLOCK: [2024-07-06 Sat 20:52]--[2024-07-06 Sat 21:03] =>  0:11
    CLOCK: [2024-07-06 Sat 08:47]--[2024-07-06 Sat 09:00] =>  0:13
    CLOCK: [2024-07-06 Sat 07:48]--[2024-07-06 Sat 08:20] =>  0:32
    CLOCK: [2024-07-04 Thu 23:12]--[2024-07-04 Thu 23:51] =>  0:39
    CLOCK: [2024-07-04 Thu 22:40]--[2024-07-04 Thu 22:55] =>  0:15
    CLOCK: [2024-07-04 Thu 08:44]--[2024-07-04 Thu 08:57] =>  0:13
    CLOCK: [2024-07-04 Thu 08:36]--[2024-07-04 Thu 08:43] =>  0:07
    CLOCK: [2024-07-03 Wed 22:30]--[2024-07-03 Wed 23:46] =>  1:16
    CLOCK: [2024-07-02 Tue 23:21]--[2024-07-03 Wed 00:14] =>  0:53
    CLOCK: [2024-07-02 Tue 22:35]--[2024-07-02 Tue 22:41] =>  0:06
    CLOCK: [2024-07-02 Tue 22:18]--[2024-07-02 Tue 22:34] =>  0:16
    :END:

Move assorted notes we have in the domain over to the documentation folder.

Notes:

- Fix issues with publishing by ignoring emacs package directories and vcpkg.
- add basic support for bibliography as per progen setup (manual bib file).

Result:

- [[https://github.com/OreStudio/OreStudio/tree/2a7b9fa8c021f08252b0951f193cec8dbd52ddff/doc/domain][Domain folder in github]].
- [[https://orestudio.github.io/OreStudio/doc/domain/domain.html][Domain page on website]].

*** COMPLETED Valgrind fails to run unit tests                        :infra:
    :LOGBOOK:
    CLOCK: [2024-07-06 Sat 07:36]--[2024-07-06 Sat 07:43] =>  0:07
    CLOCK: [2024-07-05 Fri 07:55]--[2024-07-05 Fri 08:07] =>  0:12
    CLOCK: [2024-07-04 Thu 22:56]--[2024-07-04 Thu 23:03] =>  0:07
    CLOCK: [2024-07-04 Thu 07:58]--[2024-07-04 Thu 08:27] =>  0:29
    CLOCK: [2024-07-03 Wed 23:48]--[2024-07-03 Wed 23:50] =>  0:02
    CLOCK: [2024-07-03 Wed 07:42]--[2024-07-03 Wed 07:57] =>  0:15
    :END:

At present we get the following failure:

#+begin_src
### unhandled dwarf2 abbrev form code 0x25
### unhandled dwarf2 abbrev form code 0x25
### unhandled dwarf2 abbrev form code 0x25
### unhandled dwarf2 abbrev form code 0x23
==6610== Valgrind: debuginfo reader: ensure_valid failed:
==6610== Valgrind:   during call to ML_(img_get)
==6610== Valgrind:   request for range [1940368405, +4) exceeds
==6610== Valgrind:   valid image size of 7099560 for image:
==6610== Valgrind:   "/home/runner/work/OreStudio/OreStudio/build/output/linux-clang-debug/projects/ores.ore.test/ores.ore.test"
==6610==
==6610== Valgrind: debuginfo reader: Possibly corrupted debuginfo file.
==6610== Valgrind: I can't recover.  Giving up.  Sorry.
==6610==
#+end_src

This normally means we are generating DWARF5:

- [[https://github.com/llvm/llvm-project/issues/56550][#56550: Clang Generates DWARF Info That Valgrind Can't Read]]

We still get the error with DWARF2 v4. Try v3. The problem is with valgrind:

- [[https://bugs.kde.org/show_bug.cgi?id=452758][Bug 452758: Valgrind does not read properly DWARF5 as generated by Clang14]]

We need to upgrade to latest valgrind. Try moving to latest ubuntu LTS which has
valgrind 3.22.

Updating to Ubunbtu 22.04 and valgrind 3.22 resolved the issue.

Result:

- [[https://my.cdash.org/index.php?project=OreStudio][Nightly build]] is now green.
- [[https://github.com/OreStudio/OreStudio/commit/f5e5ba3d8c298077aaf35fbfc720fa2ccaf3f0b9][commit]].

*** COMPLETED Initial sanity test generated packages                  :infra:
    :LOGBOOK:
    CLOCK: [2024-07-06 Sat 08:21]--[2024-07-06 Sat 08:46] =>  0:25
    :END:

We need to do a simple check of the packages just to make sure they install and
run.

*Result*

Linux package looks correct:

#+begin_src text
# dpkg -i orestudio_0.0.1_amd64.deb
Selecting previously unselected package orestudio.
(Reading database ... 872299 files and directories currently installed.)
Preparing to unpack orestudio_0.0.1_amd64.deb ...
Unpacking orestudio (0.0.1) ...
Setting up orestudio (0.0.1) ...
# ores.console --help
ORE Studio is a User Interface for Open Source Risk Engine (ORE).Console provides a CLI based version of the interface.
ORE Studio is created by the ORE Studio project.
ores.console uses a command-based interface: <command> <options>.
See below for a list of valid commands.

Global options:

General:
  -h [ --help ]           Display usage and exit.
  -v [ --version ]        Output version information and exit.

Logging:
  -e [ --log-enabled ]    Generate a log file.
  -l [ --log-level ] arg  What level to use for logging. Valid values: trace,
                          debug, info, warn, error. Defaults to info.
  --log-to-console        Output logging to the console, as well as to file.
  --log-directory arg     Where to place the log files.

Commands:

   data           Operates directly on data.

For command specific options, type <command> --help.
# ores.console --version
OreStudio v0.0.1
Copyright (C) 2024 Marco Craveiro.
License GPLv3: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
Build: Provider = 'github' Number = '73' Commit = 'a6ca706350b5063fe65b39484350f25bc6bfb806' Timestamp = '2024/07/05 23:59:06'
IMPORTANT: build details are NOT for security purposes.
# apt-get remove orestudio
#+end_src

GUI starts as expected.

Windows package looks very small:

#+begin_src text
$ ls -lh *msi
-rw-r--r-- 1 marco marco 448K Jul  6 00:01 OreStudio-0.0.1-win64.msi
#+end_src

Its also not installing under wine at present:

#+begin_src text
$ wine OreStudio-0.0.1-win64.msi
0024:err:module:import_dll Library zlib1.dll (which is needed by L"C:\\windows\\syswow64\\user32.dll") not found
0024:err:module:import_dll Library user32.dll (which is needed by L"C:\\windows\\syswow64\\gdi32.dll") not found
0024:err:module:import_dll Library gdi32.dll (which is needed by L"C:\\windows\\syswow64\\shell32.dll") not found
0024:err:module:import_dll Library zlib1.dll (which is needed by L"C:\\windows\\syswow64\\user32.dll") not found
0024:err:module:import_dll Library user32.dll (which is needed by L"C:\\windows\\syswow64\\gdi32.dll") not found
0024:err:module:import_dll Library gdi32.dll (which is needed by L"C:\\windows\\syswow64\\shlwapi.dll") not found
0024:err:module:import_dll Library zlib1.dll (which is needed by L"C:\\windows\\syswow64\\user32.dll") not found
0024:err:module:import_dll Library user32.dll (which is needed by L"C:\\windows\\syswow64\\shlwapi.dll") not found
0024:err:module:import_dll Library shlwapi.dll (which is needed by L"C:\\windows\\syswow64\\shell32.dll") not found
0024:err:module:import_dll Library zlib1.dll (which is needed by L"C:\\windows\\syswow64\\user32.dll") not found
0024:err:module:import_dll Library user32.dll (which is needed by L"C:\\windows\\syswow64\\shell32.dll") not found
0024:err:module:import_dll Library shell32.dll (which is needed by L"C:\\windows\\syswow64\\start.exe") not found
0024:err:module:import_dll Library zlib1.dll (which is needed by L"C:\\windows\\syswow64\\user32.dll") not found
0024:err:module:import_dll Library user32.dll (which is needed by L"C:\\windows\\syswow64\\start.exe") not found
0024:err:module:loader_init Importing dlls for L"C:\\windows\\syswow64\\start.exe" failed, status c0000135
#+end_src

This needs to be tested on a real windows box.

OSX package is not being uploaded:

#+begin_src text
Warning: No files were found with the provided path: ./build/output/macos-clang-release/packages/ORES-0.0.1-Darwin-x86_64.dmg. No artifacts will be uploaded.
#+end_src

This is because the filename is incorrect:

#+begin_src text
CPack: - package: /Users/runner/work/OreStudio/OreStudio/build/output/macos-clang-release/packages/OreStudio-0.0.1-Darwin.dmg generated.
#+end_src

*** COMPLETED Add command line options support                         :code:
    :LOGBOOK:
    CLOCK: [2024-07-06 Sat 23:51]--[2024-07-07 Sun 01:15] =>  1:24
    CLOCK: [2024-07-06 Sat 22:17]--[2024-07-06 Sat 23:11] =>  0:54
    CLOCK: [2024-07-06 Sat 21:55]--[2024-07-06 Sat 22:16] =>  0:21
    CLOCK: [2024-07-06 Sat 00:49]--[2024-07-06 Sat 00:57] =>  0:08
    CLOCK: [2024-07-05 Fri 23:37]--[2024-07-06 Sat 00:48] =>  1:11
    CLOCK: [2024-07-05 Fri 08:08]--[2024-07-05 Fri 08:59] =>  0:51
    CLOCK: [2024-07-04 Thu 23:52]--[2024-07-05 Fri 00:04] =>  0:12
    CLOCK: [2024-06-29 Sat 23:33]--[2024-06-30 Sun 00:17] =>  0:44
    :END:

Add a simple command to command line options that deals with data, for example:

#+begin_src sh
ores.console data --import currencies.xml
#+end_src

Notes:

- missing version support. Need template, etc. Try to use existing CMake
  variables to setup the version.

Result:

#+begin_src text
$ ./ores.console --help
ORE Studio is a User Interface for Open Source Risk Engine (ORE).
Console provides a CLI based version of the interface.
ORE Studio is created by the ORE Studio project.
ores.console uses a command-based interface: <command> <options>.
See below for a list of valid commands.

Global options:

General:
  -h [ --help ]           Display usage and exit.
  -v [ --version ]        Output version information and exit.

Logging:
  -e [ --log-enabled ]    Generate a log file.
  -l [ --log-level ] arg  What level to use for logging. Valid values: trace,
                          debug, info, warn, error. Defaults to info.
  --log-to-console        Output logging to the console, as well as to file.
  --log-directory arg     Where to place the log files.

Commands:

   import         Imports data into the system.

For command specific options, type <command> --help.
#+end_src

*** COMPLETED Unit tests show up twice in nightlies                   :infra:
    :LOGBOOK:
    CLOCK: [2024-07-07 Sun 08:36]--[2024-07-07 Sun 08:45] =>  0:09
    CLOCK: [2024-07-06 Sat 07:44]--[2024-07-06 Sat 07:48] =>  0:04
    :END:

For some reason we see the dummy test coming out twice in the nightlies. We
checked CTest submission and it seems there is only one entry. This could be
some kind of timing bug in CDash.

This is now happening for GCC as well. This is as expected:

- [[https://discourse.cmake.org/t/duplication-of-test-execution-with-ctest-memcheck-and-sanitizers/3784][duplication of test execution with ctest_memcheck() and sanitizers]]

We need to run the tests just once to avoid this issue.

Result:

- [[https://my.cdash.org/index.php?project=OreStudio][Nightly build]] has tests only once.

*** COMPLETED Add recipes for command line                              :doc:
    :LOGBOOK:
    CLOCK: [2024-07-07 Sun 09:16]--[2024-07-07 Sun 10:07] =>  0:51
    :END:

Using org-babel, create a simple recipe file that exercises all options for the
command line tool.

Result:

- [[https://github.com/OreStudio/OreStudio/tree/2a7b9fa8c021f08252b0951f193cec8dbd52ddff/doc/recipes][recipes in git]].
- [[https://orestudio.github.io/OreStudio/doc/recipes/console_recipes.html#ID-60086B77-B674-0B34-10AB-BF8AF3F8D75E][console recipes in site]].

*** COMPLETED Use a bar chart for sprint resourcing cost              :agile:
    :LOGBOOK:
    CLOCK: [2024-07-07 Sun 17:41]--[2024-07-07 Sun 17:53] =>  0:12
    CLOCK: [2024-07-07 Sun 16:24]--[2024-07-07 Sun 17:40] =>  1:16
    CLOCK: [2024-07-07 Sun 15:00]--[2024-07-07 Sun 15:50] =>  0:50
    CLOCK: [2024-07-07 Sun 11:30]--[2024-07-07 Sun 11:38] =>  0:08
    CLOCK: [2024-07-07 Sun 10:09]--[2024-07-07 Sun 10:16] =>  0:07
    CLOCK: [2024-07-07 Sun 09:02]--[2024-07-07 Sun 09:15] =>  0:13
    CLOCK: [2024-07-07 Sun 08:46]--[2024-07-07 Sun 08:57] =>  0:11
    :END:

We started to struggle with how we use pie charts in the sprint backlog. The
main issue is described here:

- [[https://orestudio.github.io/OreStudio/doc/agile/v0/sprint_backlog_01.html#ID-34EDDBB5-CB52-35C4-E123-E0A70FB32799][SO: R prevent overlap in pie charts]]

But it seems more generally that we should avoid them altogether:

- [[https://www.perceptualedge.com/articles/visual_business_intelligence/save_the_pies_for_dessert.pdf][Save the Pies for Dessert]]

Links:

- [[https://r-graph-gallery.com/web-horizontal-barplot-with-labels-the-economist.html][Horizontal barplot with R and ggplot2]]

Result:

- [[https://github.com/OreStudio/OreStudio/blob/c1c6780ff3027e30229f28a0c863d97d457bfb49/doc/agile/v0/sprint_backlog_01.org][Bar chart added to sprint backlog.]]

*** COMPLETED Classify stories by type                                :agile:
    :LOGBOOK:
    CLOCK: [2024-07-07 Sun 18:16]--[2024-07-07 Sun 18:41] =>  0:25
    CLOCK: [2024-07-07 Sun 18:06]--[2024-07-07 Sun 18:15] =>  0:09
    :END:

We should tag the stories by their "type" or "kind" and then generate a table
with how the resourcing was split. Sample tags:

- code: real coding task.
- infra: infrastructure work such as build, tooling, etc.
- agile: other types of overhead such as agile bookkeeping, release notes, etc.
- doc: documentation related tasks.

Seems like this is not easy to do within org itself:

- [[https://www.reddit.com/r/emacs/comments/jrf5eg/org_clocktable_how_to_sum_time_by_tags/][Org clocktable, how to sum time by tags]]
- [[https://stackoverflow.com/questions/38545767/org-mode-clock-table-by-tag/38548368#38548368][org-mode clock table by tag]]

But we could perhaps do it within R.

Result:

- [[https://github.com/OreStudio/OreStudio/blob/c1c6780ff3027e30229f28a0c863d97d457bfb49/doc/agile/v0/sprint_backlog_01.org][Bar chart added to sprint backlog.]]

*** COMPLETED Update C++ standard                                      :code:
    :LOGBOOK:
    CLOCK: [2024-07-07 Sun 22:45]--[2024-07-07 Sun 23:00] =>  0:15
    CLOCK: [2024-07-07 Sun 22:35]--[2024-07-07 Sun 22:44] =>  0:09
    CLOCK: [2024-07-07 Sun 21:49]--[2024-07-07 Sun 21:54] =>  0:05
    :END:

We are using C++ 17 at present. Change it to 20 or even 23 and see what breaks.

Seems like 20 is the highest we can go for now.

Result:

- [[https://github.com/OreStudio/OreStudio/blob/c1c6780ff3027e30229f28a0c863d97d457bfb49/CMakePresets.json#L18][presets updated to C++ 20]].

*** COMPLETED Setup laptop for development                            :infra:
    :LOGBOOK:
    CLOCK: [2024-07-11 Thu 08:23]--[2024-07-11 Thu 08:58] =>  0:35
    CLOCK: [2024-07-10 Wed 22:21]--[2024-07-10 Wed 22:41] =>  0:20
    CLOCK: [2024-07-10 Wed 07:55]--[2024-07-10 Wed 08:11] =>  0:16
    CLOCK: [2024-07-09 Tue 08:36]--[2024-07-09 Tue 08:38] =>  0:02
    CLOCK: [2024-07-09 Tue 08:20]--[2024-07-09 Tue 08:23] =>  0:03
    CLOCK: [2024-07-09 Tue 08:02]--[2024-07-09 Tue 08:19] =>  0:17
    CLOCK: [2024-07-08 Mon 22:56]--[2024-07-09 Tue 01:10] =>  2:14
    :END:

Update Debian to latest, install required packages and build ORE Studio in
laptop.

Tasks:

- install R.
- get latest cunene with R support.
- seems like the current libsystemd does not build. This is a bit weird because
  we should be pinned to the same vcpkg commit. However, for some reason it
  fails to build in the laptop. It seems there already is a fix in main, so we
  can probably solve the issue by doing an update to vcpkg. We just need to
  understand why it works everywhere else. The issue appears to be with a
  filesystem:

  - [[https://github.com/microsoft/vcpkg/issues/39365][#39365: [libsystemd] Build error on x64-linux]]

  We just need to make sure we are running latest vcpkg as the fix has made it
  in via this MR:

  - [[https://github.com/microsoft/vcpkg/pull/39741][#39741: [libsystemd] Update to 256.2]]

*** COMPLETED Add database support for currency                       :infra:
    :LOGBOOK:
    CLOCK: [2024-07-11 Thu 23:04]--[2024-07-12 Fri 00:23] =>  1:19
    :END:

Create a table and write currencies to it.

*** COMPLETED Add XML parsing support for currency                     :code:
    :LOGBOOK:
    CLOCK: [2024-07-10 Wed 22:41]--[2024-07-11 Thu 00:21] =>  1:40
    CLOCK: [2024-07-09 Tue 18:53]--[2024-07-09 Tue 19:14] =>  0:21
    CLOCK: [2024-07-07 Sun 23:01]--[2024-07-08 Mon 00:10] =>  1:09
    CLOCK: [2024-07-07 Sun 21:44]--[2024-07-07 Sun 21:48] =>  0:04
    CLOCK: [2024-07-06 Sat 20:10]--[2024-07-06 Sat 20:23] =>  0:13
    CLOCK: [2024-07-06 Sat 17:50]--[2024-07-06 Sat 18:03] =>  0:13
    CLOCK: [2024-07-06 Sat 16:09]--[2024-07-06 Sat 16:32] =>  0:23
    CLOCK: [2024-07-06 Sat 12:06]--[2024-07-06 Sat 13:11] =>  1:05
    CLOCK: [2024-06-23 Sun 22:30]--[2024-06-23 Sun 22:34] =>  0:04
    CLOCK: [2024-06-23 Sun 18:45]--[2024-06-23 Sun 20:05] =>  1:20
    :END:

We need to have the ability to read and write currencies from XML. Copy all
currency input data from examples.

*** COMPLETED Add JSON support for currency                            :code:
    :LOGBOOK:
    CLOCK: [2024-07-11 Thu 21:00]--[2024-07-11 Thu 23:03] =>  2:03
    :END:

- remove manual JSON serialisation code, add real serialisers.

*** COMPLETED Add basic widgets to display currencies                  :code:
    :LOGBOOK:
    CLOCK: [2024-07-12 Fri 22:51]--[2024-07-13 Sat 00:15] =>  1:24
    CLOCK: [2024-06-26 Wed 23:00]--[2024-06-26 Wed 23:26] =>  0:26
    :END:

We need some kind of tree view and list view.

Links:

- [[https://doc.qt.io/qt-6/modelview.html][Model/View Tutorial]]

*** COMPLETED Ignore vcpkg warnings                                   :infra:
    :LOGBOOK:
    CLOCK: [2024-07-10 Wed 08:33]--[2024-07-10 Wed 08:54] =>  0:21
    :END:

We are still getting a lot of vcpkg warnings, so our custom setup is not
working.

#+begin_src text
CMake Warning at ports/icu/portfile.cmake:2 (message):
CMake Warning at ports/qtbase/portfile.cmake:39 (message):
CMake Warning at scripts/cmake/vcpkg_buildpath_length_warning.cmake:4 (message):
CMake Warning at scripts/cmake/vcpkg_copy_pdbs.cmake:44 (message):
#+end_src

Links:

- [[https://www.kitware.com/ctest-performance-tip-use-ctestcustom-cmake-not-ctest/][CTest performance tip: Use CTestCustom.cmake, not .ctest]]

*** STARTED Create a containing structure for data                     :code:
   :LOGBOOK:
   CLOCK: [2024-06-27 Thu 23:22]--[2024-06-27 Thu 23:29] =>  0:07
   CLOCK: [2024-06-25 Tue 19:24]--[2024-06-25 Tue 19:33] =>  0:09
   CLOCK: [2024-06-25 Tue 19:12]--[2024-06-25 Tue 19:24] =>  0:12
   :END:

We need to be able to represent the data in the filesystem for the ORE samples
in a way that allows users to load and save the samples. The data in the
filesystem has the following structure:

- Examples
  - Example 1:
    - Input
    - ExpectedOutput, e.g. Output
  - Example 2
  - ...
  - Example n
  - Input

The overall context under which valuation is taking place needs a name. Options:

- environment
- workspace
- sandbox: seems to imply the data is not "real" but that is not always the
  case. This seems more like a label we could apply to the top-level container
  rather than its overall name.

Each entry within the top-level container is then itself another kind of
container. Options:

- namespace
- package

There are two types of these containers:

- libraries: components whose content is made to be shared with other
  components; and
- executables: components whose content is sufficient to execute computations.

- component

Elements within a component is of two kinds: input and output. However, this may
not necessarily be a good classification because some outputs can be used as
inputs to output other elements. Perhaps this is more of a tag.

Notes:

- move this analysis to documentation.

*** STARTED Convert plantuml diagrams to org-babel                      :doc:
    :LOGBOOK:
    CLOCK: [2024-07-01 Mon 23:04]--[2024-07-02 Tue 00:09] =>  1:05
    :END:

It may be easier to integrate diagrams with roam if they are org-mode documents.
Experiment with babel for this.

*** Use string views for static strings                               :infra:

We are creating =std::strings= where we don't need them, use string views
instead.

*** Create HTTP end point for currencies                              :infra:

Add a basic HTTP server using boost beast. Then we just need a couple of verbs:

- GET: return all currencies in database.
- POST: add one or more currencies.

*** Fix site links to main page                                         :doc:

At present we renamed readme to index in the HTML export. Do a symlink or a copy
of this file to fix links.

*** Recipes do not show variables in org-babel                        :infra:

At present when we look at a recipe in the site, we cannot tell what the
environment variables are:

#+begin_src sh
./ores.console import ${log_args} --currency-configuration ${currency_config_dir}/currencies.xml
#+END_SRC

It would be nice if =log_args= etc showed up in the recipe.

Links:

- [[https://kitchingroup.cheme.cmu.edu/blog/2019/02/12/Using-results-from-one-code-block-in-another-org-mode/][Using results from one code block in another org-mode]]

*** Install Windows package on Windows machine                        :infra:

We need to install and run the windows package and make sure it works. Check
console and GUI start.

*** Install OSX package on OSX machine                                :infra:

We need to install and run the windows package and make sure it works. Check
console and GUI start.

*** Add packaging support for images                                  :infra:

At present we are not adding images to packages.

*** Create a staging directory                                        :infra:

At present the binaries are scattered around the build directory. We should take
the same approach as Dogen and create clean directories for this.

*** Create an icon for the application                                :infra:

We copied the Dogen icon to get us going. We should really grab our own logo.

*** Add JSON parsing support for currency                              :code:

We need to have the ability to read and write currencies from JSON.

*** Add postgres support for currency                                  :code:

We need to have the ability to read and write currencies from a postgres
database.

*** Work through all types required for Example 1                      :code:

We want to be able to visualise all the data types needed in order to be able to
run the most basic example of ORE. For each of these types, create a stories.

The files are as follows. First, there are the files in the =Input= directory:

- [[https://github.com/OpenSourceRisk/Engine/tree/master/Examples/Example_1/Input][Example 1 Inputs]]

Specifically:

- =currencies.xml=
- =netting.xml=
- =ore.xml=
- =ore_swaption.xml=
- =plot.gp=
- =portfolio.xml=
- =portfolio_swap.xml=
- =portfolio_swap_20151023.xml=
- =portfolio_swaption.xml=
- =portfolio_swaption_20151023.xml=
- =simulation.xml=

In addition, we need all of the common inputs under:

- [[https://github.com/OpenSourceRisk/Engine/tree/master/Examples/Input][Examples - Common Inputs]]

These are:

- =calendaradjustment.xml=
- =conventions.xml=
- =currencies.xml=
- =curveconfig.xml=
- =fixings_20160205.txt=
- =market_20160205.txt=
- =market_20160205_flat.txt=
- =pricingengine.xml=
- =todaysmarket.xml=

Finally, we need support for the outputs. We can grab these from the expected
outputs:

- [[https://github.com/OpenSourceRisk/Engine/tree/master/Examples/Example_1/ExpectedOutput][Example 1 Expected Outputs]]

These are:

- =colva_nettingset_CPTY_A.csv=
- =curves.csv=
- =exposure_nettingset_CPTY_A.csv=
- =exposure_trade_Swap_20y.csv=
- =flows.csv=
- =log_progress.json=
- =netcube.csv=
- =npv.csv=
- =swaption_npv.csv=
- =xva.csv=

| Previous: [[id:154212FF-BB02-8D84-1E33-9338B458380A][Version Zero]] |
